
> gcr-quantum-ready-for-drug-discovery@0.0.1 synth
> cdk synth QCStack

Description: "(SO8029) CDK for GCR solution: Quantum Ready For Drug Discovery"
Resources:
  AccessLogS3Bucket951AA1CB:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: QCStack/AccessLogS3Bucket/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "this is access log bucket "
  AccessLogS3BucketPolicyB4FC9151:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: AccessLogS3Bucket951AA1CB
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - AccessLogS3Bucket951AA1CB
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - AccessLogS3Bucket951AA1CB
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/AccessLogS3Bucket/Policy/Resource
  amazonbraketNotifications70FF7804:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: amazonbraketC6E30921
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: suffix
                    Value: results.json
                  - Name: prefix
                    Value: molecule-unfolding/qc_task_output/
            LambdaFunctionArn:
              Fn::GetAtt:
                - BraketTaskEventHanlderParseBraketResultLambdaF5A04A78
                - Arn
      Managed: true
    DependsOn:
      - amazonbraketAllowBucketNotificationsToQCStackBraketTaskEventHanlderParseBraketResultLambdaCBAC69E06A8036B0
    Metadata:
      aws:cdk:path: QCStack/amazon-braket/Notifications/Resource
  amazonbraketC6E30921:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName:
        Fn::Join:
          - ""
          - - amazon-braket-qcstack-
            - Ref: AWS::AccountId
            - "-"
            - Ref: AWS::Region
      LoggingConfiguration:
        DestinationBucketName:
          Ref: AccessLogS3Bucket951AA1CB
        LogFilePrefix: accesslogs/
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: QCStack/amazon-braket/Resource
  amazonbraketPolicyA997C6D2:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: amazonbraketC6E30921
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - amazonbraketC6E30921
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - amazonbraketC6E30921
                        - Arn
                    - /*
          - Action:
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - amazonbraketC6E30921
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - amazonbraketC6E30921
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/amazon-braket/Policy/Resource
  amazonbraketAutoDeleteObjectsCustomResource58542BE3:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: amazonbraketC6E30921
    DependsOn:
      - amazonbraketPolicyA997C6D2
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: QCStack/amazon-braket/AutoDeleteObjectsCustomResource/Default
  amazonbraketAllowBucketNotificationsToQCStackBraketTaskEventHanlderParseBraketResultLambdaCBAC69E06A8036B0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - BraketTaskEventHanlderParseBraketResultLambdaF5A04A78
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::GetAtt:
          - amazonbraketC6E30921
          - Arn
    Metadata:
      aws:cdk:path: QCStack/amazon-braket/AllowBucketNotificationsToQCStackBraketTaskEventHanlderParseBraketResultLambdaCBAC69E0
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: QCStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3Bucket4842F32D
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3VersionKeyD0A0B57A
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3VersionKeyD0A0B57A
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs12.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: amazonbraketC6E30921
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: QCStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1
      aws:asset:property: Code
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: the lambda is auto generated by CDK
          - id: W89
            reason: the lambda is auto generated by CDK
          - id: W92
            reason: the lambda is auto generated by CDK
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: QCStack/VPC
    Metadata:
      aws:cdk:path: QCStack/VPC/Resource
  VPCIngressSubnet1Subnet4257CD65:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.0.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: QCStack/VPC/IngressSubnet1
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet1/Subnet
  VPCIngressSubnet1RouteTable9BE753A6:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: QCStack/VPC/IngressSubnet1
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet1/RouteTable
  VPCIngressSubnet1RouteTableAssociationCAFE4089:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCIngressSubnet1RouteTable9BE753A6
      SubnetId:
        Ref: VPCIngressSubnet1Subnet4257CD65
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet1/RouteTableAssociation
  VPCIngressSubnet1DefaultRouteFE025494:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCIngressSubnet1RouteTable9BE753A6
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet1/DefaultRoute
  VPCIngressSubnet1EIP99406D22:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: QCStack/VPC/IngressSubnet1
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet1/EIP
  VPCIngressSubnet1NATGatewayEA4AE80E:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VPCIngressSubnet1Subnet4257CD65
      AllocationId:
        Fn::GetAtt:
          - VPCIngressSubnet1EIP99406D22
          - AllocationId
      Tags:
        - Key: Name
          Value: QCStack/VPC/IngressSubnet1
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet1/NATGateway
  VPCIngressSubnet2SubnetE0EA735B:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.64.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Ingress
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: QCStack/VPC/IngressSubnet2
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet2/Subnet
  VPCIngressSubnet2RouteTableDFE1B4BC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: QCStack/VPC/IngressSubnet2
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet2/RouteTable
  VPCIngressSubnet2RouteTableAssociationB244DE25:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCIngressSubnet2RouteTableDFE1B4BC
      SubnetId:
        Ref: VPCIngressSubnet2SubnetE0EA735B
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet2/RouteTableAssociation
  VPCIngressSubnet2DefaultRoute9FF8300E:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCIngressSubnet2RouteTableDFE1B4BC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet2/DefaultRoute
  VPCIngressSubnet2EIPCE44C233:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: QCStack/VPC/IngressSubnet2
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet2/EIP
  VPCIngressSubnet2NATGateway68BB4190:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: VPCIngressSubnet2SubnetE0EA735B
      AllocationId:
        Fn::GetAtt:
          - VPCIngressSubnet2EIPCE44C233
          - AllocationId
      Tags:
        - Key: Name
          Value: QCStack/VPC/IngressSubnet2
    Metadata:
      aws:cdk:path: QCStack/VPC/IngressSubnet2/NATGateway
  VPCApplicationSubnet1SubnetCE118F80:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.128.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Application
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: QCStack/VPC/ApplicationSubnet1
    Metadata:
      aws:cdk:path: QCStack/VPC/ApplicationSubnet1/Subnet
  VPCApplicationSubnet1RouteTable5B6CE71A:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: QCStack/VPC/ApplicationSubnet1
    Metadata:
      aws:cdk:path: QCStack/VPC/ApplicationSubnet1/RouteTable
  VPCApplicationSubnet1RouteTableAssociation8DF0EAE5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCApplicationSubnet1RouteTable5B6CE71A
      SubnetId:
        Ref: VPCApplicationSubnet1SubnetCE118F80
    Metadata:
      aws:cdk:path: QCStack/VPC/ApplicationSubnet1/RouteTableAssociation
  VPCApplicationSubnet1DefaultRouteA4E47D36:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCApplicationSubnet1RouteTable5B6CE71A
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCIngressSubnet1NATGatewayEA4AE80E
    Metadata:
      aws:cdk:path: QCStack/VPC/ApplicationSubnet1/DefaultRoute
  VPCApplicationSubnet2Subnet988E96B1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.192.0/18
      VpcId:
        Ref: VPCB9E5F0B4
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Application
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: QCStack/VPC/ApplicationSubnet2
    Metadata:
      aws:cdk:path: QCStack/VPC/ApplicationSubnet2/Subnet
  VPCApplicationSubnet2RouteTableFDC3EEE6:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      Tags:
        - Key: Name
          Value: QCStack/VPC/ApplicationSubnet2
    Metadata:
      aws:cdk:path: QCStack/VPC/ApplicationSubnet2/RouteTable
  VPCApplicationSubnet2RouteTableAssociationD84040F3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCApplicationSubnet2RouteTableFDC3EEE6
      SubnetId:
        Ref: VPCApplicationSubnet2Subnet988E96B1
    Metadata:
      aws:cdk:path: QCStack/VPC/ApplicationSubnet2/RouteTableAssociation
  VPCApplicationSubnet2DefaultRouteC3680A52:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VPCApplicationSubnet2RouteTableFDC3EEE6
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCIngressSubnet2NATGateway68BB4190
    Metadata:
      aws:cdk:path: QCStack/VPC/ApplicationSubnet2/DefaultRoute
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: QCStack/VPC
    Metadata:
      aws:cdk:path: QCStack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPCB9E5F0B4
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
    Metadata:
      aws:cdk:path: QCStack/VPC/VPCGW
  VPClogtoCWIAMRoleCFE2A6E9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: QCStack/VPC
    Metadata:
      aws:cdk:path: QCStack/VPC/logtoCW/IAMRole/Resource
  VPClogtoCWIAMRoleDefaultPolicyF548A5B9:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - vpcFlowlog69E65BBD
                - Arn
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - VPClogtoCWIAMRoleCFE2A6E9
                - Arn
        Version: "2012-10-17"
      PolicyName: VPClogtoCWIAMRoleDefaultPolicyF548A5B9
      Roles:
        - Ref: VPClogtoCWIAMRoleCFE2A6E9
    Metadata:
      aws:cdk:path: QCStack/VPC/logtoCW/IAMRole/DefaultPolicy/Resource
  VPClogtoCWFlowLog99C98B79:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId:
        Ref: VPCB9E5F0B4
      ResourceType: VPC
      TrafficType: ALL
      DeliverLogsPermissionArn:
        Fn::GetAtt:
          - VPClogtoCWIAMRoleCFE2A6E9
          - Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName:
        Ref: vpcFlowlog69E65BBD
      Tags:
        - Key: Name
          Value: QCStack/VPC
    Metadata:
      aws:cdk:path: QCStack/VPC/logtoCW/FlowLog
  qcLogKey219D212D:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
          - Action:
              - kms:Encrypt*
              - kms:ReEncrypt*
              - kms:Decrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :log-group:*
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - logs.
                    - Ref: AWS::Region
                    - "."
                    - Ref: AWS::URLSuffix
            Resource: "*"
        Version: "2012-10-17"
      EnableKeyRotation: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: QCStack/qcLogKey/Resource
  vpcFlowlog69E65BBD:
    Type: AWS::Logs::LogGroup
    Properties:
      KmsKeyId:
        Fn::GetAtt:
          - qcLogKey219D212D
          - Arn
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: QCStack/vpcFlowlog/Resource
  batchSg97F2201B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for QC batch compute environment
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:1024-49151
          FromPort: 1024
          IpProtocol: tcp
          ToPort: 49151
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: QCStack/batchSg/Resource
  lambdaSgD8D93E20:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for lambda
      SecurityGroupEgress:
        - CidrIp: 255.255.255.255/32
          Description: Disallow all traffic
          FromPort: 252
          IpProtocol: icmp
          ToPort: 86
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: QCStack/lambdaSg/Resource
  MolUnfNotebookNotebookRole40C44025:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/MolUnfNotebook/NotebookRole/Resource
  MolUnfNotebookNotebookRoleDefaultPolicy67656253:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - braket:GetJob
              - braket:GetQuantumTask
              - braket:CancelQuantumTask
              - braket:CancelJob
              - braket:ListTagsForResource
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:braket:*:"
                    - Ref: AWS::AccountId
                    - :quantum-task/*
              - Fn::Join:
                  - ""
                  - - "arn:aws:braket:*:"
                    - Ref: AWS::AccountId
                    - :job/*
          - Action:
              - braket:CreateJob
              - braket:GetDevice
              - braket:SearchDevices
              - braket:CreateQuantumTask
              - braket:SearchJobs
              - braket:SearchQuantumTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
                  - /*
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
          - Action:
              - ecr:UploadLayerPart
              - ecr:BatchDeleteImage
              - ecr:DeleteRepository
              - ecr:CompleteLayerUpload
              - ecr:DescribeRepositories
              - ecr:BatchCheckLayerAvailability
              - ecr:CreateRepository
              - ecr:GetDownloadUrlForLayer
              - ecr:PutImage
              - ecr:BatchGetImage
              - ecr:InitiateLayerUpload
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/molecule-unfolding/*
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:*:"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/sagemaker/*
        Version: "2012-10-17"
      PolicyName: MolUnfNotebookNotebookRoleDefaultPolicy67656253
      Roles:
        - Ref: MolUnfNotebookNotebookRole40C44025
    Metadata:
      aws:cdk:path: QCStack/MolUnfNotebook/NotebookRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  MolUnfNotebookinstallbraketsdk38DD8407:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      OnStart:
        - Content: IyEvdXNyL2Jpbi9lbnYgYmFzaAoKc3VkbyAtdSBlYzItdXNlciAtaSA8PEVPUwoKVE1QRElSPSQobWt0ZW1wIC1kKQpjZCAiJFRNUERJUiIKCmF3cyBzMyBjcCBzMzovL2FtYXpvbi1icmFrZXQtZ2NyLXFjLXNvbC1jb21tb24vcWMvbm90ZWJvb2svYnJha2V0LW5vdGVib29rLWxjYy56aXAgLgp1bnppcCBicmFrZXQtbm90ZWJvb2stbGNjLnppcAouL2luc3RhbGwuc2gKCm5vaHVwIHJtIC1mciAiJFRNUERJUiIgJgoKY2QgL2hvbWUvZWMyLXVzZXIvU2FnZU1ha2VyCnJtIC1yZiAqCgphd3MgczMgY3AgczM6Ly9hbWF6b24tYnJha2V0LWdjci1xYy1zb2wtY29tbW9uL3FjL2xhdGVzdC9jb2RlLnppcCAuCnVuemlwIGNvZGUuemlwCmNkIHNyYy9tb2xlY3VsZS11bmZvbGRpbmcvCgojX1JVTl9CVUlMRF8jLi9idWlsZC5zaCB8IHRlZSAvdG1wL2J1aWxkLmxvZwoKRU9TCgpleGl0IDAK
    Metadata:
      aws:cdk:path: QCStack/MolUnfNotebook/install-braket-sdk
  MolUnfNotebookqcNotebookKey16AB94AA:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
        Version: "2012-10-17"
      EnableKeyRotation: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: QCStack/MolUnfNotebook/qcNotebookKey/Resource
  MolUnfNotebookGCRQCLifeScienceNotebook1B664A05:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      InstanceType:
        Ref: MolUnfNotebookNotebookInstanceTypeFC58A004
      RoleArn:
        Fn::GetAtt:
          - MolUnfNotebookNotebookRole40C44025
          - Arn
      KmsKeyId:
        Ref: MolUnfNotebookqcNotebookKey16AB94AA
      LifecycleConfigName:
        Fn::GetAtt:
          - MolUnfNotebookinstallbraketsdk38DD8407
          - NotebookInstanceLifecycleConfigName
      RootAccess: Enabled
      VolumeSizeInGB: 50
    Metadata:
      aws:cdk:path: QCStack/MolUnfNotebook/GCRQCLifeScienceNotebook
  MolUnfDashboardqcBenchmarkDataSource06433DBC:
    Type: AWS::QuickSight::DataSource
    Properties:
      AwsAccountId:
        Ref: AWS::AccountId
      DataSourceId: QCStack-qcBenchmark-Datasource
      DataSourceParameters:
        AthenaParameters:
          WorkGroup: primary
      Name: QCStack-qcBenchmark-Datasource
      Permissions:
        - Actions:
            - quicksight:UpdateDataSourcePermissions
            - quicksight:DescribeDataSource
            - quicksight:DescribeDataSourcePermissions
            - quicksight:PassDataSource
            - quicksight:UpdateDataSource
            - quicksight:DeleteDataSource
          Principal:
            Fn::Join:
              - ""
              - - "arn:aws:quicksight:us-east-1:"
                - Ref: AWS::AccountId
                - :user/default/
                - Ref: MolUnfDashboardquickSightUser2793B5D6
      Type: ATHENA
    Metadata:
      aws:cdk:path: QCStack/MolUnfDashboard/qcBenchmark-DataSource
  MolUnfDashboardqcBenchmarkDataSet61C984A1:
    Type: AWS::QuickSight::DataSet
    Properties:
      AwsAccountId:
        Ref: AWS::AccountId
      DataSetId: QCStack-qcBenchmark-DataSet
      ImportMode: DIRECT_QUERY
      Name: QCStack-qcBenchmark-DataSet
      Permissions:
        - Actions:
            - quicksight:UpdateDataSetPermissions
            - quicksight:DescribeDataSet
            - quicksight:DescribeDataSetPermissions
            - quicksight:PassDataSet
            - quicksight:DescribeIngestion
            - quicksight:ListIngestions
            - quicksight:UpdateDataSet
            - quicksight:DeleteDataSet
            - quicksight:CreateIngestion
            - quicksight:CancelIngestion
          Principal:
            Fn::Join:
              - ""
              - - "arn:aws:quicksight:us-east-1:"
                - Ref: AWS::AccountId
                - :user/default/
                - Ref: MolUnfDashboardquickSightUser2793B5D6
      PhysicalTableMap:
        ATHENATable:
          CustomSql:
            Columns:
              - Name: execution_id
                Type: STRING
              - Name: compute_type
                Type: STRING
              - Name: resource
                Type: STRING
              - Name: params
                Type: STRING
              - Name: opt_params
                Type: STRING
              - Name: task_duration
                Type: DECIMAL
              - Name: time_info
                Type: STRING
              - Name: start_time
                Type: STRING
              - Name: experiment_name
                Type: STRING
              - Name: task_id
                Type: STRING
              - Name: model_name
                Type: STRING
              - Name: model_filename
                Type: STRING
              - Name: scenario
                Type: STRING
              - Name: create_time
                Type: STRING
              - Name: result_detail
                Type: STRING
              - Name: result_location
                Type: STRING
            DataSourceArn:
              Fn::GetAtt:
                - MolUnfDashboardqcBenchmarkDataSource06433DBC
                - Arn
            Name: all
            SqlQuery: SELECT * FROM "AwsDataCatalog"."default"."qc_benchmark_metrics_hist"
    Metadata:
      aws:cdk:path: QCStack/MolUnfDashboard/qcBenchmark-DataSet
  MolUnfDashboardqcBenchmarkQSTemplateB64579C4:
    Type: AWS::QuickSight::Template
    Properties:
      AwsAccountId:
        Ref: AWS::AccountId
      SourceEntity:
        SourceTemplate:
          Arn:
            Fn::Join:
              - ""
              - - "arn:aws:quicksight:us-east-1:"
                - Ref: MolUnfDashboardquicksightTemplateAccountId04E44A1F
                - :template/QC-benchmark-analysis-template
      TemplateId: QCStack-qcBenchmark-QSTemplate
      Name: QCStack-qcBenchmark-QSTemplate
      Permissions:
        - Actions:
            - quicksight:DescribeTemplate
          Principal:
            Fn::Join:
              - ""
              - - "arn:aws:quicksight:us-east-1:"
                - Ref: AWS::AccountId
                - :user/default/
                - Ref: MolUnfDashboardquickSightUser2793B5D6
    Metadata:
      aws:cdk:path: QCStack/MolUnfDashboard/qcBenchmark-QSTemplate
  MolUnfDashboardqcBenchmarkDashboard9ABE4539:
    Type: AWS::QuickSight::Dashboard
    Properties:
      AwsAccountId:
        Ref: AWS::AccountId
      DashboardId: QCStack-qcBenchmark-Dashboard
      SourceEntity:
        SourceTemplate:
          Arn:
            Fn::GetAtt:
              - MolUnfDashboardqcBenchmarkQSTemplateB64579C4
              - Arn
          DataSetReferences:
            - DataSetArn:
                Fn::GetAtt:
                  - MolUnfDashboardqcBenchmarkDataSet61C984A1
                  - Arn
              DataSetPlaceholder: qcds
      DashboardPublishOptions:
        AdHocFilteringOption:
          AvailabilityStatus: DISABLED
      Name: QCStack-qcBenchmark-Dashboard
      Permissions:
        - Actions:
            - quicksight:DescribeDashboard
            - quicksight:ListDashboardVersions
            - quicksight:UpdateDashboardPermissions
            - quicksight:QueryDashboard
            - quicksight:UpdateDashboard
            - quicksight:DeleteDashboard
            - quicksight:DescribeDashboardPermissions
            - quicksight:UpdateDashboardPublishedVersion
          Principal:
            Fn::Join:
              - ""
              - - "arn:aws:quicksight:us-east-1:"
                - Ref: AWS::AccountId
                - :user/default/
                - Ref: MolUnfDashboardquickSightUser2793B5D6
    Metadata:
      aws:cdk:path: QCStack/MolUnfDashboard/qcBenchmark-Dashboard
  MolUnfDashboardqcBenchmarkAnalysis0ADB79B5:
    Type: AWS::QuickSight::Analysis
    Properties:
      AnalysisId: QCStack-qcBenchmark-Analysis
      AwsAccountId:
        Ref: AWS::AccountId
      SourceEntity:
        SourceTemplate:
          Arn:
            Fn::GetAtt:
              - MolUnfDashboardqcBenchmarkQSTemplateB64579C4
              - Arn
          DataSetReferences:
            - DataSetArn:
                Fn::GetAtt:
                  - MolUnfDashboardqcBenchmarkDataSet61C984A1
                  - Arn
              DataSetPlaceholder: qcds
      Name: QCStack-qcBenchmark-Analysis
      Permissions:
        - Actions:
            - quicksight:DescribeAnalysis
            - quicksight:UpdateAnalysisPermissions
            - quicksight:QueryAnalysis
            - quicksight:UpdateAnalysis
            - quicksight:RestoreAnalysis
            - quicksight:DeleteAnalysis
            - quicksight:DescribeAnalysisPermissions
          Principal:
            Fn::Join:
              - ""
              - - "arn:aws:quicksight:us-east-1:"
                - Ref: AWS::AccountId
                - :user/default/
                - Ref: MolUnfDashboardquickSightUser2793B5D6
    Metadata:
      aws:cdk:path: QCStack/MolUnfDashboard/qcBenchmark-Analysis
  MolUnfbenchmarkHPCStateMachineRoleD2A63F17:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/HPCStateMachine/Role/Resource
  MolUnfbenchmarkHPCStateMachineRoleDefaultPolicy768E66A4:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - TaskParametersLambda7323EB65
                - Arn
          - Action: batch:SubmitJob
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:batch:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :job-definition/*
              - Fn::Join:
                  - ""
                  - - "arn:aws:batch:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :job-queue/*
          - Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:events:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :rule/*
        Version: "2012-10-17"
      PolicyName: MolUnfbenchmarkHPCStateMachineRoleDefaultPolicy768E66A4
      Roles:
        - Ref: MolUnfbenchmarkHPCStateMachineRoleD2A63F17
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/HPCStateMachine/Role/DefaultPolicy/Resource
  MolUnfbenchmarkHPCStateMachine75FD9990:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - MolUnfbenchmarkHPCStateMachineRoleD2A63F17
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"Get Task Parameters","States":{"Get Task Parameters":{"Next":"ParallelHPCJobs","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - TaskParametersLambda7323EB65
                - Arn
            - '","Payload":{"s3_bucket":"'
            - Ref: amazonbraketC6E30921
            - '","param_type":"PARAMS_FOR_HPC","execution_id.$":"$.execution_id","context.$":"$$"}}},"ParallelHPCJobs":{"Type":"Map","ResultPath":"$.parallelHPCJobsMap","End":true,"Parameters":{"ItemIndex.$":"$$.Map.Item.Index","ItemValue.$":"$$.Map.Item.Value","execution_id.$":"$.execution_id"},"Iterator":{"StartAt":"Run HPC Batch Task","States":{"Run HPC Batch Task":{"End":true,"Type":"Task","Resource":"arn:aws:states:::batch:submitJob.sync","Parameters":{"JobDefinition":"'
            - Ref: HPCJobTemplateE9AC349D
            - "\",\"JobName.$\":\"States.Format('HPCTask{}-{}', $.ItemIndex, $.ItemValue.task_name)\",\"JobQueue\":\""
            - Ref: hpcJobQueue5010B1F4
            - "\",\"ContainerOverrides\":{\"Command.$\":\"$.ItemValue.params\",\"ResourceRequirements\":[{\"Type\":\"VCPU\",\"Value.$\":\"States.Format('{}',$.ItemValue.vcpus)\"},{\"Type\":\"MEMORY\",\"Value.$\":\"States.Format('{}', $.ItemValue.memory)\"}]}},\"ResultSelector\":{\"JobId.$\":\"$.JobId\",\"JobName.$\":\"$.JobName\"}}}},\"ItemsPath\":\"$.hpcTaskParams\",\"MaxConcurrency\":20}}}"
    DependsOn:
      - MolUnfbenchmarkHPCStateMachineRoleDefaultPolicy768E66A4
      - MolUnfbenchmarkHPCStateMachineRoleD2A63F17
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/HPCStateMachine/Resource
  MolUnfbenchmarkQCDeviceStateMachineRoleDD50E7F0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/QCDeviceStateMachine/Role/Resource
  MolUnfbenchmarkQCDeviceStateMachineRoleDefaultPolicy248388D6:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - DeviceAvailableCheckLambda49F8D395
                - Arn
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - TaskParametersLambda7323EB65
                - Arn
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - SubmitQCTaskLambda9265FD4E
                - Arn
        Version: "2012-10-17"
      PolicyName: MolUnfbenchmarkQCDeviceStateMachineRoleDefaultPolicy248388D6
      Roles:
        - Ref: MolUnfbenchmarkQCDeviceStateMachineRoleDD50E7F0
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/QCDeviceStateMachine/Role/DefaultPolicy/Resource
  MolUnfbenchmarkQCDeviceStateMachineCA2B7D43:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - MolUnfbenchmarkQCDeviceStateMachineRoleDD50E7F0
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"Check Device status","States":{"Check Device status":{"Next":"Device Online ?","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultPath":"$.checkQCDeviceStep","ResultSelector":{"statusPayload.$":"$.Payload"},"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - DeviceAvailableCheckLambda49F8D395
                - Arn
            - '","Payload":{"execution_id.$":"$.execution_id","device_arn.$":"$.device_arn"}}},"Device Online ?":{"Type":"Choice","Choices":[{"Variable":"$.checkQCDeviceStep.statusPayload.deviceStatus","StringEquals":"ONLINE","Next":"Get Task Paramters"}],"Default":"Device Not Online"},"Device Not Online":{"Type":"Fail"},"Get Task Paramters":{"Next":"ParallelQCJobs","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - TaskParametersLambda7323EB65
                - Arn
            - '","Payload":{"s3_bucket":"'
            - Ref: amazonbraketC6E30921
            - '","param_type":"PARAMS_FOR_QC_DEVICE","device_arn.$":"$.device_arn","execution_id.$":"$.execution_id"}}},"ParallelQCJobs":{"Type":"Map","ResultPath":"$.parallelQCJobsMap","End":true,"Parameters":{"ItemIndex.$":"$$.Map.Item.Index","ItemValue.$":"$$.Map.Item.Value","execution_id.$":"$.execution_id"},"Iterator":{"StartAt":"Submit QC Task","States":{"Submit QC Task":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultPath":"$.submitQCTaskStep","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke.waitForTaskToken","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - SubmitQCTaskLambda9265FD4E
                - Arn
            - '","Payload":{"execution_id.$":"$.execution_id","task_token.$":"$$.Task.Token","s3_bucket":"'
            - Ref: amazonbraketC6E30921
            - '","ItemValue.$":"$.ItemValue","ItemIndex.$":"$.ItemIndex"}}}}},"ItemsPath":"$.qcTaskParams","MaxConcurrency":20}}}'
    DependsOn:
      - MolUnfbenchmarkQCDeviceStateMachineRoleDefaultPolicy248388D6
      - MolUnfbenchmarkQCDeviceStateMachineRoleDD50E7F0
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/QCDeviceStateMachine/Resource
  MolUnfbenchmarkQCStateMachineRole7E7CBCD1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/QCStateMachine/Role/Resource
  MolUnfbenchmarkQCStateMachineRoleDefaultPolicy6A8F6373:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - TaskParametersLambda7323EB65
                - Arn
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: MolUnfbenchmarkQCDeviceStateMachineCA2B7D43
          - Action:
              - states:DescribeExecution
              - states:StopExecution
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":states:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":execution:"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: MolUnfbenchmarkQCDeviceStateMachineCA2B7D43
                  - "*"
          - Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":events:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
        Version: "2012-10-17"
      PolicyName: MolUnfbenchmarkQCStateMachineRoleDefaultPolicy6A8F6373
      Roles:
        - Ref: MolUnfbenchmarkQCStateMachineRole7E7CBCD1
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/QCStateMachine/Role/DefaultPolicy/Resource
  MolUnfbenchmarkQCStateMachine6011E614:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - MolUnfbenchmarkQCStateMachineRole7E7CBCD1
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"Get Device List","States":{"Get Device List":{"Next":"parallelQCDeviceMap","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - TaskParametersLambda7323EB65
                - Arn
            - '","Payload":{"s3_bucket":"'
            - Ref: amazonbraketC6E30921
            - '","param_type":"QC_DEVICE_LIST","execution_id.$":"$.execution_id","context.$":"$$"}}},"parallelQCDeviceMap":{"Type":"Map","ResultPath":"$.parallelQCDeviceMap","End":true,"Parameters":{"ItemIndex.$":"$$.Map.Item.Index","ItemValue.$":"$$.Map.Item.Value","execution_id.$":"$.execution_id"},"Iterator":{"StartAt":"Run On Device","States":{"Run On Device":{"End":true,"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::states:startExecution.sync:2","Parameters":{"Input":{"device_arn.$":"$.ItemValue","execution_id.$":"$.execution_id","AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$":"$$.Execution.Id"},"StateMachineArn":"
            - Ref: MolUnfbenchmarkQCDeviceStateMachineCA2B7D43
            - '"}}}},"ItemsPath":"$.devices_arns","MaxConcurrency":20}}}'
    DependsOn:
      - MolUnfbenchmarkQCStateMachineRoleDefaultPolicy6A8F6373
      - MolUnfbenchmarkQCStateMachineRole7E7CBCD1
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/QCStateMachine/Resource
  MolUnfbenchmarkRunHPCAndQCStateMachineRole1B465406:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/RunHPCAndQCStateMachine/Role/Resource
  MolUnfbenchmarkRunHPCAndQCStateMachineRoleDefaultPolicy6692E53C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: MolUnfbenchmarkHPCStateMachine75FD9990
          - Action:
              - states:DescribeExecution
              - states:StopExecution
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":states:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":execution:"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: MolUnfbenchmarkHPCStateMachine75FD9990
                  - "*"
          - Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":events:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: MolUnfbenchmarkQCStateMachine6011E614
          - Action:
              - states:DescribeExecution
              - states:StopExecution
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":states:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":execution:"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: MolUnfbenchmarkQCStateMachine6011E614
                  - "*"
        Version: "2012-10-17"
      PolicyName: MolUnfbenchmarkRunHPCAndQCStateMachineRoleDefaultPolicy6692E53C
      Roles:
        - Ref: MolUnfbenchmarkRunHPCAndQCStateMachineRole1B465406
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/RunHPCAndQCStateMachine/Role/DefaultPolicy/Resource
  MolUnfbenchmarkRunHPCAndQCStateMachine5E4BB682:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - MolUnfbenchmarkRunHPCAndQCStateMachineRole1B465406
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"hpcAndQCParallel","States":{"hpcAndQCParallel":{"Type":"Parallel","End":true,"Branches":[{"StartAt":"Run HPC StateMachine","States":{"Run HPC StateMachine":{"End":true,"Type":"Task","ResultPath":"$.hpcStateMachineStep","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::states:startExecution.sync:2","Parameters":{"Input":{"execution_id.$":"$.execution_id","AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$":"$$.Execution.Id"},"StateMachineArn":"
            - Ref: MolUnfbenchmarkHPCStateMachine75FD9990
            - '"}}}},{"StartAt":"Run QC StateMachine","States":{"Run QC StateMachine":{"End":true,"Type":"Task","ResultPath":"$.qcStateMachineStep","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::states:startExecution.sync:2","Parameters":{"Input":{"execution_id.$":"$.execution_id","AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$":"$$.Execution.Id"},"StateMachineArn":"
            - Ref: MolUnfbenchmarkQCStateMachine6011E614
            - '"}}}}]}}}'
    DependsOn:
      - MolUnfbenchmarkRunHPCAndQCStateMachineRoleDefaultPolicy6692E53C
      - MolUnfbenchmarkRunHPCAndQCStateMachineRole1B465406
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/RunHPCAndQCStateMachine/Resource
  MolUnfbenchmarkSNSTopicD09697C5:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: QC Stepfunctions Execution Complete Topic
      KmsMasterKeyId:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":kms:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - :alias/aws/sns
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/SNS Topic/Resource
  MolUnfbenchmarkBenchmarkStateMachineRoleA69C1B09:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - states.
                    - Ref: AWS::Region
                    - .amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/BenchmarkStateMachine/Role/Resource
  MolUnfbenchmarkBenchmarkStateMachineRoleDefaultPolicy64259FAC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - TaskParametersLambda7323EB65
                - Arn
          - Action: batch:SubmitJob
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":batch:"
                    - Ref: AWS::Region
                    - ":"
                    - Ref: AWS::AccountId
                    - :job-definition/*
              - Ref: hpcJobQueue5010B1F4
          - Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":events:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :rule/StepFunctionsGetEventsForBatchJobsRule
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: MolUnfbenchmarkRunHPCAndQCStateMachine5E4BB682
          - Action:
              - states:DescribeExecution
              - states:StopExecution
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":states:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":execution:"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: MolUnfbenchmarkRunHPCAndQCStateMachine5E4BB682
                  - "*"
          - Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":events:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - AggResultLambda2D78F89C
                - Arn
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: MolUnfbenchmarkHPCStateMachine75FD9990
          - Action:
              - states:DescribeExecution
              - states:StopExecution
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":states:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":execution:"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: MolUnfbenchmarkHPCStateMachine75FD9990
                  - "*"
          - Action: states:StartExecution
            Effect: Allow
            Resource:
              Ref: MolUnfbenchmarkQCStateMachine6011E614
          - Action:
              - states:DescribeExecution
              - states:StopExecution
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":states:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":execution:"
                  - Fn::Select:
                      - 6
                      - Fn::Split:
                          - ":"
                          - Ref: MolUnfbenchmarkQCStateMachine6011E614
                  - "*"
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: MolUnfbenchmarkSNSTopicD09697C5
        Version: "2012-10-17"
      PolicyName: MolUnfbenchmarkBenchmarkStateMachineRoleDefaultPolicy64259FAC
      Roles:
        - Ref: MolUnfbenchmarkBenchmarkStateMachineRoleA69C1B09
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/BenchmarkStateMachine/Role/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W76
            reason: The policy is generated automatically by CDK
  MolUnfbenchmarkBenchmarkStateMachineA5468B11:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - MolUnfbenchmarkBenchmarkStateMachineRoleA69C1B09
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"Check Input","States":{"Check Input":{"Next":"Create Model","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - TaskParametersLambda7323EB65
                - Arn
            - '","Payload":{"s3_bucket":"'
            - Ref: amazonbraketC6E30921
            - '","s3_prefix":"molecule-unfolding","param_type":"CHECK_INPUT","user_input.$":"$","execution_id.$":"$$.Execution.Id"}}},"Create Model":{"Next":"Select Running Mode","Type":"Task","ResultPath":"$.createModelStep","ResultSelector":{"JobId.$":"$.JobId"},"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::batch:submitJob.sync","Parameters":{"JobDefinition":"
            - Ref: CreateModelJobDef9834138D
            - '","JobName":"createModelTask","JobQueue":"'
            - Ref: hpcJobQueue5010B1F4
            - '","ContainerOverrides":{"Command.$":"$.params"}}},"Select Running Mode":{"Type":"Choice","Choices":[{"Variable":"$.runMode","IsPresent":false,"Next":"Run QC and HPC"},{"Variable":"$.runMode","StringEquals":"HPC","Next":"Run HPC"},{"Variable":"$.runMode","StringEquals":"QC","Next":"Run QC"}],"Default":"Run QC and HPC"},"Run QC and HPC":{"Next":"Aggregate Result","Type":"Task","ResultPath":"$.qcAndHpcBranch","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::states:startExecution.sync:2","Parameters":{"Input":{"execution_id.$":"$.execution_id","AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$":"$$.Execution.Id"},"StateMachineArn":"
            - Ref: MolUnfbenchmarkRunHPCAndQCStateMachine5E4BB682
            - '"}},"Aggregate Result":{"Next":"Notify Complete","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultPath":"$.aggResultStep","ResultSelector":{"Payload.$":"$.Payload"},"Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::lambda:invoke","Parameters":{"FunctionName":"
            - Fn::GetAtt:
                - AggResultLambda2D78F89C
                - Arn
            - '","Payload":{"execution_id.$":"$.execution_id"}}},"Run HPC":{"Next":"Aggregate Result","Type":"Task","ResultPath":"$.hpcBranch","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::states:startExecution.sync:2","Parameters":{"Input":{"execution_id.$":"$.execution_id","AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$":"$$.Execution.Id"},"StateMachineArn":"
            - Ref: MolUnfbenchmarkHPCStateMachine75FD9990
            - '"}},"Run QC":{"Next":"Aggregate Result","Type":"Task","ResultPath":"$.qcBranch","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::states:startExecution.sync:2","Parameters":{"Input":{"execution_id.$":"$.execution_id","AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$":"$$.Execution.Id"},"StateMachineArn":"
            - Ref: MolUnfbenchmarkQCStateMachine6011E614
            - '"}},"Notify Complete":{"End":true,"Type":"Task","ResultPath":"$.snsStep","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::sns:publish","Parameters":{"TopicArn":"
            - Ref: MolUnfbenchmarkSNSTopicD09697C5
            - '","Message":{"execution_id.$":"$.execution_id","start_time.$":"$.start_time","end_time.$":"$.aggResultStep.Payload.endTime","dashboard":"https://'
            - Ref: AWS::Region
            - .quicksight.aws.amazon.com/sn/dashboards/QCStack-qcBenchmark-Dashboard","status":"Complete"}}}},"TimeoutSeconds":129600}
    DependsOn:
      - MolUnfbenchmarkBenchmarkStateMachineRoleDefaultPolicy64259FAC
      - MolUnfbenchmarkBenchmarkStateMachineRoleA69C1B09
    Metadata:
      aws:cdk:path: QCStack/MolUnfbenchmark/BenchmarkStateMachine/Resource
  executionRole2F5D1D4F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/executionRole/Resource
  executionRoleDefaultPolicy90A5691A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/*
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
                  - /*
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:*:"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/batch/*
        Version: "2012-10-17"
      PolicyName: executionRoleDefaultPolicy90A5691A
      Roles:
        - Ref: executionRole2F5D1D4F
    Metadata:
      aws:cdk:path: QCStack/executionRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  jobRoleA2173686:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/jobRole/Resource
  jobRoleDefaultPolicy0F8702BD:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/*
          - Action: ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
                  - /*
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:*:"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/batch/*
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":ecr:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :repository/aws-cdk/assets
        Version: "2012-10-17"
      PolicyName: jobRoleDefaultPolicy0F8702BD
      Roles:
        - Ref: jobRoleA2173686
    Metadata:
      aws:cdk:path: QCStack/jobRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  BatchHPCComputeEnvEcsInstanceRole3AB549E9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
    DependsOn:
      - VPCApplicationSubnet1DefaultRouteA4E47D36
      - VPCApplicationSubnet1RouteTable5B6CE71A
      - VPCApplicationSubnet1RouteTableAssociation8DF0EAE5
      - VPCApplicationSubnet1SubnetCE118F80
      - VPCApplicationSubnet2DefaultRouteC3680A52
      - VPCApplicationSubnet2RouteTableFDC3EEE6
      - VPCApplicationSubnet2RouteTableAssociationD84040F3
      - VPCApplicationSubnet2Subnet988E96B1
      - VPCIGWB7E252D3
      - VPCIngressSubnet1DefaultRouteFE025494
      - VPCIngressSubnet1EIP99406D22
      - VPCIngressSubnet1NATGatewayEA4AE80E
      - VPCIngressSubnet1RouteTable9BE753A6
      - VPCIngressSubnet1RouteTableAssociationCAFE4089
      - VPCIngressSubnet1Subnet4257CD65
      - VPCIngressSubnet2DefaultRoute9FF8300E
      - VPCIngressSubnet2EIPCE44C233
      - VPCIngressSubnet2NATGateway68BB4190
      - VPCIngressSubnet2RouteTableDFE1B4BC
      - VPCIngressSubnet2RouteTableAssociationB244DE25
      - VPCIngressSubnet2SubnetE0EA735B
      - VPClogtoCWFlowLog99C98B79
      - VPClogtoCWIAMRoleDefaultPolicyF548A5B9
      - VPClogtoCWIAMRoleCFE2A6E9
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: QCStack/Batch-HPC-Compute-Env/Ecs-Instance-Role/Resource
  BatchHPCComputeEnvInstanceProfile63BA90C9:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: BatchHPCComputeEnvEcsInstanceRole3AB549E9
    DependsOn:
      - VPCApplicationSubnet1DefaultRouteA4E47D36
      - VPCApplicationSubnet1RouteTable5B6CE71A
      - VPCApplicationSubnet1RouteTableAssociation8DF0EAE5
      - VPCApplicationSubnet1SubnetCE118F80
      - VPCApplicationSubnet2DefaultRouteC3680A52
      - VPCApplicationSubnet2RouteTableFDC3EEE6
      - VPCApplicationSubnet2RouteTableAssociationD84040F3
      - VPCApplicationSubnet2Subnet988E96B1
      - VPCIGWB7E252D3
      - VPCIngressSubnet1DefaultRouteFE025494
      - VPCIngressSubnet1EIP99406D22
      - VPCIngressSubnet1NATGatewayEA4AE80E
      - VPCIngressSubnet1RouteTable9BE753A6
      - VPCIngressSubnet1RouteTableAssociationCAFE4089
      - VPCIngressSubnet1Subnet4257CD65
      - VPCIngressSubnet2DefaultRoute9FF8300E
      - VPCIngressSubnet2EIPCE44C233
      - VPCIngressSubnet2NATGateway68BB4190
      - VPCIngressSubnet2RouteTableDFE1B4BC
      - VPCIngressSubnet2RouteTableAssociationB244DE25
      - VPCIngressSubnet2SubnetE0EA735B
      - VPClogtoCWFlowLog99C98B79
      - VPClogtoCWIAMRoleDefaultPolicyF548A5B9
      - VPClogtoCWIAMRoleCFE2A6E9
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: QCStack/Batch-HPC-Compute-Env/Instance-Profile
  BatchHPCComputeEnvResourceServiceInstanceRole6CF57BC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: batch.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSBatchServiceRole
    DependsOn:
      - VPCApplicationSubnet1DefaultRouteA4E47D36
      - VPCApplicationSubnet1RouteTable5B6CE71A
      - VPCApplicationSubnet1RouteTableAssociation8DF0EAE5
      - VPCApplicationSubnet1SubnetCE118F80
      - VPCApplicationSubnet2DefaultRouteC3680A52
      - VPCApplicationSubnet2RouteTableFDC3EEE6
      - VPCApplicationSubnet2RouteTableAssociationD84040F3
      - VPCApplicationSubnet2Subnet988E96B1
      - VPCIGWB7E252D3
      - VPCIngressSubnet1DefaultRouteFE025494
      - VPCIngressSubnet1EIP99406D22
      - VPCIngressSubnet1NATGatewayEA4AE80E
      - VPCIngressSubnet1RouteTable9BE753A6
      - VPCIngressSubnet1RouteTableAssociationCAFE4089
      - VPCIngressSubnet1Subnet4257CD65
      - VPCIngressSubnet2DefaultRoute9FF8300E
      - VPCIngressSubnet2EIPCE44C233
      - VPCIngressSubnet2NATGateway68BB4190
      - VPCIngressSubnet2RouteTableDFE1B4BC
      - VPCIngressSubnet2RouteTableAssociationB244DE25
      - VPCIngressSubnet2SubnetE0EA735B
      - VPClogtoCWFlowLog99C98B79
      - VPClogtoCWIAMRoleDefaultPolicyF548A5B9
      - VPClogtoCWIAMRoleCFE2A6E9
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: QCStack/Batch-HPC-Compute-Env/Resource-Service-Instance-Role/Resource
  BatchHPCComputeEnv15BD7E67:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        AllocationStrategy: BEST_FIT_PROGRESSIVE
        InstanceRole:
          Fn::GetAtt:
            - BatchHPCComputeEnvInstanceProfile63BA90C9
            - Arn
        InstanceTypes:
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
        MaxvCpus: 256
        MinvCpus: 0
        SecurityGroupIds:
          - Fn::GetAtt:
              - batchSg97F2201B
              - GroupId
        Subnets:
          - Ref: VPCApplicationSubnet1SubnetCE118F80
          - Ref: VPCApplicationSubnet2Subnet988E96B1
        Type: EC2
      ServiceRole:
        Fn::GetAtt:
          - BatchHPCComputeEnvResourceServiceInstanceRole6CF57BC2
          - Arn
      State: ENABLED
    DependsOn:
      - VPCApplicationSubnet1DefaultRouteA4E47D36
      - VPCApplicationSubnet1RouteTable5B6CE71A
      - VPCApplicationSubnet1RouteTableAssociation8DF0EAE5
      - VPCApplicationSubnet1SubnetCE118F80
      - VPCApplicationSubnet2DefaultRouteC3680A52
      - VPCApplicationSubnet2RouteTableFDC3EEE6
      - VPCApplicationSubnet2RouteTableAssociationD84040F3
      - VPCApplicationSubnet2Subnet988E96B1
      - VPCIGWB7E252D3
      - VPCIngressSubnet1DefaultRouteFE025494
      - VPCIngressSubnet1EIP99406D22
      - VPCIngressSubnet1NATGatewayEA4AE80E
      - VPCIngressSubnet1RouteTable9BE753A6
      - VPCIngressSubnet1RouteTableAssociationCAFE4089
      - VPCIngressSubnet1Subnet4257CD65
      - VPCIngressSubnet2DefaultRoute9FF8300E
      - VPCIngressSubnet2EIPCE44C233
      - VPCIngressSubnet2NATGateway68BB4190
      - VPCIngressSubnet2RouteTableDFE1B4BC
      - VPCIngressSubnet2RouteTableAssociationB244DE25
      - VPCIngressSubnet2SubnetE0EA735B
      - VPClogtoCWFlowLog99C98B79
      - VPClogtoCWIAMRoleDefaultPolicyF548A5B9
      - VPClogtoCWIAMRoleCFE2A6E9
      - VPCB9E5F0B4
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: QCStack/Batch-HPC-Compute-Env/Resource
  hpcJobQueue5010B1F4:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment:
            Ref: BatchHPCComputeEnv15BD7E67
          Order: 1
      Priority: 1
      State: ENABLED
    Metadata:
      aws:cdk:path: QCStack/hpcJobQueue/Resource
  TaskParametersLambdaRole2B71E550:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/TaskParametersLambdaRole/Resource
  TaskParametersLambdaRoleDefaultPolicyA4063AF7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - braket:GetJob
              - braket:GetQuantumTask
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:braket:*:"
                    - Ref: AWS::AccountId
                    - :quantum-task/*
              - Fn::Join:
                  - ""
                  - - "arn:aws:braket:*:"
                    - Ref: AWS::AccountId
                    - :job/*
          - Action:
              - braket:CreateJob
              - braket:GetDevice
              - braket:SearchDevices
              - braket:CreateQuantumTask
              - braket:SearchJobs
              - braket:SearchQuantumTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
                  - /*
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:*:"
                  - Ref: AWS::AccountId
                  - :log-group:*
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:AssignPrivateIpAddresses
              - ec2:UnassignPrivateIpAddresses
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: TaskParametersLambdaRoleDefaultPolicyA4063AF7
      Roles:
        - Ref: TaskParametersLambdaRole2B71E550
    Metadata:
      aws:cdk:path: QCStack/TaskParametersLambdaRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  TaskParametersLambda7323EB65:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParameters69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953S3Bucket6653960D
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953S3VersionKey01218889
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953S3VersionKey01218889
      Role:
        Fn::GetAtt:
          - TaskParametersLambdaRole2B71E550
          - Arn
      Handler: app.handler
      MemorySize: 512
      ReservedConcurrentExecutions: 10
      Runtime: python3.8
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - lambdaSgD8D93E20
              - GroupId
        SubnetIds:
          - Ref: VPCApplicationSubnet1SubnetCE118F80
          - Ref: VPCApplicationSubnet2Subnet988E96B1
    DependsOn:
      - TaskParametersLambdaRoleDefaultPolicyA4063AF7
      - TaskParametersLambdaRole2B71E550
    Metadata:
      aws:cdk:path: QCStack/TaskParametersLambda/Resource
      aws:asset:path: asset.69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953
      aws:asset:original-path: /Volumes/workplace/qc/src/AWS-gcr-qc-life-science/source/src/molecule-unfolding/lambda/TaskParametersLambda
      aws:asset:is-bundled: false
      aws:asset:property: Code
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: the lambda already have the cloudwatch permission
  CreateModelJobDef9834138D:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Command:
          - --aws-region
          - Ref: AWS::Region
          - --resource
          - vCpus2_Mem_4G
          - --s3-bucket
          - Ref: amazonbraketC6E30921
        ExecutionRoleArn:
          Fn::GetAtt:
            - executionRole2F5D1D4F
            - Arn
        Image:
          Fn::Join:
            - ""
            - - Ref: AWS::AccountId
              - .dkr.ecr.
              - Ref: AWS::Region
              - "."
              - Ref: AWS::URLSuffix
              - /aws-cdk/assets:b678382320a92a24d23d1ed47cba890871ce1acb7c3c5661900ce4add4d37132
        JobRoleArn:
          Fn::GetAtt:
            - jobRoleA2173686
            - Arn
        Privileged: false
        ReadonlyRootFilesystem: false
        ResourceRequirements:
          - Type: VCPU
            Value: "2"
          - Type: MEMORY
            Value: "4096"
      PlatformCapabilities:
        - EC2
      RetryStrategy:
        Attempts: 1
      Timeout:
        AttemptDurationSeconds: 7200
    Metadata:
      aws:cdk:path: QCStack/CreateModelJobDef/Resource
  HPCJobTemplateE9AC349D:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties:
        Command:
          - --model-param
          - M=1&D=4&A=300&HQ=200
          - --aws-region
          - Ref: AWS::Region
          - --resource
          - vCpus2_Mem_4G
          - --s3-bucket
          - Ref: amazonbraketC6E30921
        ExecutionRoleArn:
          Fn::GetAtt:
            - executionRole2F5D1D4F
            - Arn
        Image:
          Fn::Join:
            - ""
            - - Ref: AWS::AccountId
              - .dkr.ecr.
              - Ref: AWS::Region
              - "."
              - Ref: AWS::URLSuffix
              - /aws-cdk/assets:ebdfe5aaa3b24b90083253407812a537c7b77ce337260c6abb560bef5809106a
        JobRoleArn:
          Fn::GetAtt:
            - jobRoleA2173686
            - Arn
        Privileged: false
        ReadonlyRootFilesystem: false
        ResourceRequirements:
          - Type: VCPU
            Value: "2"
          - Type: MEMORY
            Value: "4096"
      PlatformCapabilities:
        - EC2
      RetryStrategy:
        Attempts: 1
      Timeout:
        AttemptDurationSeconds: 7200
    Metadata:
      aws:cdk:path: QCStack/HPCJob_Template/Resource
  DeviceAvailableCheckLambdaRoleAB473EAC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/DeviceAvailableCheckLambdaRole/Resource
  DeviceAvailableCheckLambdaRoleDefaultPolicy132C1F83:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - braket:GetJob
              - braket:GetQuantumTask
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:braket:*:"
                    - Ref: AWS::AccountId
                    - :quantum-task/*
              - Fn::Join:
                  - ""
                  - - "arn:aws:braket:*:"
                    - Ref: AWS::AccountId
                    - :job/*
          - Action:
              - braket:CreateJob
              - braket:GetDevice
              - braket:SearchDevices
              - braket:CreateQuantumTask
              - braket:SearchJobs
              - braket:SearchQuantumTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
                  - /*
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:*:"
                  - Ref: AWS::AccountId
                  - :log-group:*
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:AssignPrivateIpAddresses
              - ec2:UnassignPrivateIpAddresses
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: DeviceAvailableCheckLambdaRoleDefaultPolicy132C1F83
      Roles:
        - Ref: DeviceAvailableCheckLambdaRoleAB473EAC
    Metadata:
      aws:cdk:path: QCStack/DeviceAvailableCheckLambdaRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  DeviceAvailableCheckLambda49F8D395:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Join:
            - ""
            - - Ref: AWS::AccountId
              - .dkr.ecr.
              - Ref: AWS::Region
              - "."
              - Ref: AWS::URLSuffix
              - /aws-cdk/assets:8ad17c9aee6027cf17c4f36f146b92fbbd0bba756c8edef1551413350f7aee79
      Role:
        Fn::GetAtt:
          - DeviceAvailableCheckLambdaRoleAB473EAC
          - Arn
      MemorySize: 512
      PackageType: Image
      ReservedConcurrentExecutions: 10
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - lambdaSgD8D93E20
              - GroupId
        SubnetIds:
          - Ref: VPCApplicationSubnet1SubnetCE118F80
          - Ref: VPCApplicationSubnet2Subnet988E96B1
    DependsOn:
      - DeviceAvailableCheckLambdaRoleDefaultPolicy132C1F83
      - DeviceAvailableCheckLambdaRoleAB473EAC
    Metadata:
      aws:cdk:path: QCStack/DeviceAvailableCheckLambda/Resource
      aws:asset:path: asset.8ad17c9aee6027cf17c4f36f146b92fbbd0bba756c8edef1551413350f7aee79
      aws:asset:dockerfile-path: Dockerfile
      aws:asset:property: Code.ImageUri
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: the lambda already have the cloudwatch permission
  SubmitQCTaskLambdaRoleF2E91E92:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/SubmitQCTaskLambdaRole/Resource
  SubmitQCTaskLambdaRoleDefaultPolicy1D1D8F09:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - braket:GetJob
              - braket:GetQuantumTask
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:braket:*:"
                    - Ref: AWS::AccountId
                    - :quantum-task/*
              - Fn::Join:
                  - ""
                  - - "arn:aws:braket:*:"
                    - Ref: AWS::AccountId
                    - :job/*
          - Action:
              - braket:CreateJob
              - braket:GetDevice
              - braket:SearchDevices
              - braket:CreateQuantumTask
              - braket:SearchJobs
              - braket:SearchQuantumTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
                  - /*
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:*:"
                  - Ref: AWS::AccountId
                  - :log-group:*
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:AssignPrivateIpAddresses
              - ec2:UnassignPrivateIpAddresses
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: SubmitQCTaskLambdaRoleDefaultPolicy1D1D8F09
      Roles:
        - Ref: SubmitQCTaskLambdaRoleF2E91E92
    Metadata:
      aws:cdk:path: QCStack/SubmitQCTaskLambdaRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  SubmitQCTaskLambda9265FD4E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Join:
            - ""
            - - Ref: AWS::AccountId
              - .dkr.ecr.
              - Ref: AWS::Region
              - "."
              - Ref: AWS::URLSuffix
              - /aws-cdk/assets:b21b7804df238b6a8e7af2fe59e81035ce9cb3c616f3ff535d9b056466d770df
      Role:
        Fn::GetAtt:
          - SubmitQCTaskLambdaRoleF2E91E92
          - Arn
      MemorySize: 512
      PackageType: Image
      ReservedConcurrentExecutions: 20
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - lambdaSgD8D93E20
              - GroupId
        SubnetIds:
          - Ref: VPCApplicationSubnet1SubnetCE118F80
          - Ref: VPCApplicationSubnet2Subnet988E96B1
    DependsOn:
      - SubmitQCTaskLambdaRoleDefaultPolicy1D1D8F09
      - SubmitQCTaskLambdaRoleF2E91E92
    Metadata:
      aws:cdk:path: QCStack/SubmitQCTaskLambda/Resource
      aws:asset:path: asset.b21b7804df238b6a8e7af2fe59e81035ce9cb3c616f3ff535d9b056466d770df
      aws:asset:dockerfile-path: Dockerfile
      aws:asset:property: Code.ImageUri
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: the lambda already have the cloudwatch permission
  AggResultLambdaRoleE19247FA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/AggResultLambdaRole/Resource
  AggResultLambdaRoleDefaultPolicy7AC5256A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - athena:StartQueryExecution
              - athena:GetQueryResults
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:athena:*:"
                    - Ref: AWS::AccountId
                    - :workgroup/*
              - Fn::Join:
                  - ""
                  - - "arn:aws:athena:*:"
                    - Ref: AWS::AccountId
                    - :datacatalog/*
          - Action: athena:ListDataCatalogs
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
                  - /*
          - Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:AssignPrivateIpAddresses
              - ec2:UnassignPrivateIpAddresses
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:*:"
                  - Ref: AWS::AccountId
                  - :log-group:*
        Version: "2012-10-17"
      PolicyName: AggResultLambdaRoleDefaultPolicy7AC5256A
      Roles:
        - Ref: AggResultLambdaRoleE19247FA
    Metadata:
      aws:cdk:path: QCStack/AggResultLambdaRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  AggResultLambda2D78F89C:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: AssetParameters8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccfS3BucketE475CC31
        S3Key:
          Fn::Join:
            - ""
            - - Fn::Select:
                  - 0
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccfS3VersionKeyBB08CD90
              - Fn::Select:
                  - 1
                  - Fn::Split:
                      - "||"
                      - Ref: AssetParameters8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccfS3VersionKeyBB08CD90
      Role:
        Fn::GetAtt:
          - AggResultLambdaRoleE19247FA
          - Arn
      Environment:
        Variables:
          BUCKET:
            Ref: amazonbraketC6E30921
      Handler: index.handler
      MemorySize: 512
      ReservedConcurrentExecutions: 10
      Runtime: nodejs12.x
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - lambdaSgD8D93E20
              - GroupId
        SubnetIds:
          - Ref: VPCApplicationSubnet1SubnetCE118F80
          - Ref: VPCApplicationSubnet2Subnet988E96B1
    DependsOn:
      - AggResultLambdaRoleDefaultPolicy7AC5256A
      - AggResultLambdaRoleE19247FA
    Metadata:
      aws:cdk:path: QCStack/AggResultLambda/Resource
      aws:asset:path: asset.8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccf
      aws:asset:original-path: /Volumes/workplace/qc/src/AWS-gcr-qc-life-science/source/src/molecule-unfolding/lambda/AthenaTabeLambda
      aws:asset:is-bundled: false
      aws:asset:property: Code
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: the lambda already have the cloudwatch permission
  BraketTaskEventHanlderParseBraketResultLambdaF5A04A78:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri:
          Fn::Join:
            - ""
            - - Ref: AWS::AccountId
              - .dkr.ecr.
              - Ref: AWS::Region
              - "."
              - Ref: AWS::URLSuffix
              - /aws-cdk/assets:c011080feef571001a41ceb96ec3b18d2e14c40ccb11b4aef6a77386600ee3e3
      Role:
        Fn::GetAtt:
          - ParseBraketResultLambdaRole7A6A337E
          - Arn
      MemorySize: 512
      PackageType: Image
      ReservedConcurrentExecutions: 20
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - Fn::GetAtt:
              - lambdaSgD8D93E20
              - GroupId
        SubnetIds:
          - Ref: VPCApplicationSubnet1SubnetCE118F80
          - Ref: VPCApplicationSubnet2Subnet988E96B1
    DependsOn:
      - ParseBraketResultLambdaRoleDefaultPolicy430E3CD1
      - ParseBraketResultLambdaRole7A6A337E
    Metadata:
      aws:cdk:path: QCStack/BraketTaskEventHanlder/ParseBraketResultLambda/Resource
      aws:asset:path: asset.c011080feef571001a41ceb96ec3b18d2e14c40ccb11b4aef6a77386600ee3e3
      aws:asset:dockerfile-path: Dockerfile
      aws:asset:property: Code.ImageUri
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: the lambda already have the cloudwatch permission
  ParseBraketResultLambdaRole7A6A337E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: QCStack/ParseBraketResultLambdaRole/Resource
  ParseBraketResultLambdaRoleDefaultPolicy430E3CD1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
                  - /*
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: amazonbraketC6E30921
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:AssignPrivateIpAddresses
              - ec2:UnassignPrivateIpAddresses
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:CreateLogGroup
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:logs:*:"
                  - Ref: AWS::AccountId
                  - :log-group:*
          - Action:
              - states:SendTaskSuccess
              - states:SendTaskFailure
              - states:SendTaskHeartbeat
            Effect: Allow
            Resource: arn:aws:states:*:*:*
        Version: "2012-10-17"
      PolicyName: ParseBraketResultLambdaRoleDefaultPolicy430E3CD1
      Roles:
        - Ref: ParseBraketResultLambdaRole7A6A337E
    Metadata:
      aws:cdk:path: QCStack/ParseBraketResultLambdaRole/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: QCStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: QCStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: some permissions are not resource-level permissions
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
              response_status = "SUCCESS"
              error_message = ""
              try:
                  props = event["ResourceProperties"]
                  bucket = props["BucketName"]
                  notification_configuration = props["NotificationConfiguration"]
                  request_type = event["RequestType"]
                  managed = props.get('Managed', 'true').lower() == 'true'
                  stack_id = event['StackId']

                  if managed:
                    config = handle_managed(request_type, notification_configuration)
                  else:
                    config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

                  put_bucket_notification_configuration(bucket, config)
              except Exception as e:
                  logging.exception("Failed to put bucket notification configuration")
                  response_status = "FAILED"
                  error_message = f"Error: {str(e)}. "
              finally:
                  submit_response(event, context, response_status, error_message)


          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration


          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):

            # find external notifications
            external_notifications = find_external_notifications(bucket, stack_id)

            # if delete, that's all we need
            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            # otherwise, merge external with incoming config and augment with id
            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming
            return notifications


          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              # if the notification was created by us, we know what id to expect
              # so we can filter by it.
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            return external_notifications


          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)


          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)


          def submit_response(event: dict, context, response_status: str, error_message: str):
              response_body = json.dumps(
                  {
                      "Status": response_status,
                      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                      "StackId": event["StackId"],
                      "RequestId": event["RequestId"],
                      "LogicalResourceId": event["LogicalResourceId"],
                      "NoEcho": False,
                  }
              ).encode("utf-8")
              headers = {"content-type": "", "content-length": str(len(response_body))}
              try:
                  req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
                  with urllib.request.urlopen(req) as response:
                      print(response.read().decode("utf-8"))
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.7
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: QCStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: the lambda is auto generated by CDK
          - id: W89
            reason: the lambda is auto generated by CDK
          - id: W92
            reason: the lambda is auto generated by CDK
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/3VUy3LbMAz8lt5ppmk67bWJ8xi3SaramdwpGrIRiYTKh1OPRv9ekLIsJ52euAAJYLUAdC7PLz7Ljx++qVc/0+v6rNPkQHaroHQt5mR9cFEHMa/sEjxFp0HMow9k/mMWjna4BicuvYfAaTZoNym8UE4ZCHzDxs8Y2hjElKOyXGuNAcn2InHp/IXsrqKuIRc/oOEoqEG9n9wHezCulIdeNMqUayW7VBicQe85s7iNVqcSKfSIr4nD3MKoDYy+XoD+JLvnVqeXz8VcFLHkGqtY2oHPhJYUAzypsoHJP/lYBdKoxqL5IoGbRZGORxXuVIBXtReFwx3DKfHCsliMxwcDk4N1GbhBWwM2iNuGXu8pazzCFejoMOzvHMU20zp19AKVkd2SBsr5nCSd0IKbr2xuaYUNi1obL7sfkC/5YJVpwx6ueCw04l541tMoVjY34ZEClET1mPMeK9B73QC3vcJM/v2TXvyOqGuPm23IOa5VUKvjvGRrUOoJTNuocHD7bUnKrZNxaVWz9+iZTYC2OnTXz4LydSKeh2Rhd1SDuFJBb1l9g+E7lWLFAeM4eB5jF27+sIi5kSvr8zz47bvETDMvA79nNg+qFRk9cKvQDvNxat8qbMR8S8hflNajaaDhjCnPE7WYhy+DXpSJHacnw3sDN3aHjmxuf16df7z8Cb8ixFzziBlcQ4UWx3F84+DKFzOVttbLvLy8BF5yf4Jisu4kErQbH54szxjj5BJa8hjI7fMy9sLSGuSLP9udf5Ff+W/z4hFnLtqABuRyOP8C8xaEJ4oEAAA=
    Metadata:
      aws:cdk:path: QCStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3Bucket4842F32D:
    Type: String
    Description: S3 bucket for asset "1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1"
  AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1S3VersionKeyD0A0B57A:
    Type: String
    Description: S3 key for asset version "1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1"
  AssetParameters1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1ArtifactHash0128B949:
    Type: String
    Description: Artifact hash for asset "1f7e277bd526ebce1983fa1e7a84a5281ec533d9187caaebb773681bbf7bf4c1"
  AssetParameters69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953S3Bucket6653960D:
    Type: String
    Description: S3 bucket for asset "69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953"
  AssetParameters69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953S3VersionKey01218889:
    Type: String
    Description: S3 key for asset version "69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953"
  AssetParameters69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953ArtifactHashA0B0F205:
    Type: String
    Description: Artifact hash for asset "69a72a3925da52ac352fff5b1cd4f1933ff08fe17b6b153de98570906ef51953"
  AssetParameters8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccfS3BucketE475CC31:
    Type: String
    Description: S3 bucket for asset "8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccf"
  AssetParameters8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccfS3VersionKeyBB08CD90:
    Type: String
    Description: S3 key for asset version "8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccf"
  AssetParameters8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccfArtifactHashD1C98964:
    Type: String
    Description: Artifact hash for asset "8e50a5fcc868eaae5a14e8fbef6c197fc3d561847fc7a2a53a2896f2d185fccf"
  MolUnfNotebookNotebookInstanceTypeFC58A004:
    Type: String
    Default: ml.c5.xlarge
    Description: Sagemaker notebook instance type
  MolUnfDashboardquicksightTemplateAccountId04E44A1F:
    Type: String
    Default: "080766874269"
    Description: "The AWS account id to host quicksight template in region: us-east-1"
  MolUnfDashboardquickSightUser2793B5D6:
    Type: String
    Default: Admin-OneClick/yonmzn-Isengard
    Description: Quicksight User
Outputs:
  bucketName:
    Description: S3 bucket name
    Value:
      Ref: amazonbraketC6E30921
  MolUnfNotebooknotebookUrl7E1A3C1E:
    Description: Notebook URL
    Value:
      Fn::Join:
        - ""
        - - https://console.aws.amazon.com/sagemaker/home?region=
          - Ref: AWS::Region
          - "#/notebook-instances/openNotebook/"
          - Fn::GetAtt:
              - MolUnfNotebookGCRQCLifeScienceNotebook1B664A05
              - NotebookInstanceName
          - ?view=classic
  MolUnfDashboardqcBenchmarkDashboardUrl15FBD916:
    Description: Quicksight Dashboard Url
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: AWS::Region
          - .quicksight.aws.amazon.com/sn/dashboards/QCStack-qcBenchmark-Dashboard
  MolUnfDashboardqcBenchmarkAnalysisE9EC6AE6:
    Description: Quicksight Analysis Id
    Value: QCStack-qcBenchmark-Analysis
  MolUnfbenchmarkSNSTopicName69FAE83B:
    Description: SNS Topic Name
    Value:
      Fn::GetAtt:
        - MolUnfbenchmarkSNSTopicD09697C5
        - TopicName
  MolUnfbenchmarkstateMachineURL7ECDDB40:
    Description: State Machine URL
    Value:
      Fn::Join:
        - ""
        - - https://console.aws.amazon.com/states/home?region=
          - Ref: AWS::Region
          - "#/statemachines/view/"
          - Ref: MolUnfbenchmarkBenchmarkStateMachineA5468B11
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

