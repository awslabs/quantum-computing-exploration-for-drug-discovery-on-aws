/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


import {
  aws_iam as iam,
  aws_kms as kms,
  aws_ec2 as ec2,
  CfnResource,
  Stack,
  Arn,
  ArnFormat,
  IAspect,
  Fn,
} from 'aws-cdk-lib';

import {
  IConstruct,
} from 'constructs';


export class ChangePublicSubnet implements IAspect {
  visit(node: IConstruct): void {
    if (node instanceof ec2.CfnSubnet && node.mapPublicIpOnLaunch) {
      node.addPropertyOverride('MapPublicIpOnLaunch', false);
    }
  }
}

export class AddCfnNag implements IAspect {
  visit(node: IConstruct): void {
    if (node.node.path.endsWith('/EventRuleCustomResourceProvider/framework-onEvent/Resource')) {
      (node as CfnResource).addMetadata('cfn_nag', {
        rules_to_suppress: [],
      });
    }
    if (node.node.path.endsWith('/Notebook/NotebookRole/DefaultPolicy/Resource') ||
        node.node.path.endsWith('/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource') ||
        node.node.path.endsWith('/CreateEventRuleFuncRole/DefaultPolicy/Resource')
    ) {
      (node as CfnResource).addMetadata('cfn_nag', {
        rules_to_suppress: [{
          id: 'W12',
          reason: 'some permissions are not resource-level permissions',
        }],
      });
    } else if (node.node.path.endsWith('/VPC/EcrDockerEndpoint/SecurityGroup/Resource') ||
              node.node.path.endsWith('/VPC/AthenaEndpoint/SecurityGroup/Resource') ||
              node.node.path.endsWith('/VPC/BraketEndpoint/SecurityGroup/Resource')
    ) {
      (node as CfnResource).addMetadata('cfn_nag', {
        rules_to_suppress: [{
          id: 'W5',
          reason: 'generated by CDK',
        },
        {
          id: 'W40',
          reason: 'generated by CDK',
        }],
      });

    } else if (node.node.path.endsWith('/SNSKey/Resource')) {
      (node as CfnResource).addMetadata('cfn_nag', {
        rules_to_suppress: [{
          id: 'F76',
          reason: 'Key for SNS, add constraint in conditions',
        }],
      });
    }
  }
}

export function grantKmsKeyPerm(key: kms.IKey, logGroupName ? : string): void {
  key.addToResourcePolicy(new iam.PolicyStatement({
    principals: [new iam.ServicePrincipal('logs.amazonaws.com')],
    actions: [
      'kms:Encrypt*',
      'kms:ReEncrypt*',
      'kms:Decrypt*',
      'kms:GenerateDataKey*',
      'kms:Describe*',
    ],
    resources: [
      '*',
    ],
    conditions: {
      ArnLike: {
        'kms:EncryptionContext:aws:logs:arn': Arn.format({
          service: 'logs',
          resource: 'log-group',
          resourceName: logGroupName ? logGroupName : '*',
          arnFormat: ArnFormat.COLON_RESOURCE_NAME,
        }, Stack.of(key)),
      },
    },
  }));
}

export function genRandomDigits(): string {
  return `${Fn.select(0, Fn.split('-', Fn.select(2, Fn.split('/', Fn.ref('AWS::StackId')))))}`;
}
