"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancerListenerProtocol = exports.LoadBalancerType = exports.ContextProvider = void 0;
/**
 * Identifier for the context provider.
 *
 * @stability stable
 */
var ContextProvider;
(function (ContextProvider) {
    ContextProvider["AMI_PROVIDER"] = "ami";
    ContextProvider["AVAILABILITY_ZONE_PROVIDER"] = "availability-zones";
    ContextProvider["HOSTED_ZONE_PROVIDER"] = "hosted-zone";
    ContextProvider["SSM_PARAMETER_PROVIDER"] = "ssm";
    ContextProvider["VPC_PROVIDER"] = "vpc-provider";
    ContextProvider["ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER"] = "endpoint-service-availability-zones";
    ContextProvider["LOAD_BALANCER_PROVIDER"] = "load-balancer";
    ContextProvider["LOAD_BALANCER_LISTENER_PROVIDER"] = "load-balancer-listener";
    ContextProvider["SECURITY_GROUP_PROVIDER"] = "security-group";
    ContextProvider["KEY_PROVIDER"] = "key-provider";
})(ContextProvider = exports.ContextProvider || (exports.ContextProvider = {}));
/**
 * Type of load balancer.
 *
 * @stability stable
 */
var LoadBalancerType;
(function (LoadBalancerType) {
    LoadBalancerType["NETWORK"] = "network";
    LoadBalancerType["APPLICATION"] = "application";
})(LoadBalancerType = exports.LoadBalancerType || (exports.LoadBalancerType = {}));
/**
 * The protocol for connections from clients to the load balancer.
 *
 * @stability stable
 */
var LoadBalancerListenerProtocol;
(function (LoadBalancerListenerProtocol) {
    LoadBalancerListenerProtocol["HTTP"] = "HTTP";
    LoadBalancerListenerProtocol["HTTPS"] = "HTTPS";
    LoadBalancerListenerProtocol["TCP"] = "TCP";
    LoadBalancerListenerProtocol["TLS"] = "TLS";
    LoadBalancerListenerProtocol["UDP"] = "UDP";
    LoadBalancerListenerProtocol["TCP_UDP"] = "TCP_UDP";
})(LoadBalancerListenerProtocol = exports.LoadBalancerListenerProtocol || (exports.LoadBalancerListenerProtocol = {}));
//# sourceMappingURL=data:application/json;base64,