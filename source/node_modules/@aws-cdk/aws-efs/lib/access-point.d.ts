import { IResource, Resource } from '@aws-cdk/core';
import { Construct } from 'constructs';
import { IFileSystem } from './efs-file-system';
/**
 * Represents an EFS AccessPoint.
 *
 * @stability stable
 */
export interface IAccessPoint extends IResource {
    /**
     * The ID of the AccessPoint.
     *
     * @stability stable
     * @attribute true
     */
    readonly accessPointId: string;
    /**
     * The ARN of the AccessPoint.
     *
     * @stability stable
     * @attribute true
     */
    readonly accessPointArn: string;
    /**
     * The EFS file system.
     *
     * @stability stable
     */
    readonly fileSystem: IFileSystem;
}
/**
 * Permissions as POSIX ACL.
 *
 * @stability stable
 */
export interface Acl {
    /**
     * Specifies the POSIX user ID to apply to the RootDirectory.
     *
     * Accepts values from 0 to 2^32 (4294967295).
     *
     * @stability stable
     */
    readonly ownerUid: string;
    /**
     * Specifies the POSIX group ID to apply to the RootDirectory.
     *
     * Accepts values from 0 to 2^32 (4294967295).
     *
     * @stability stable
     */
    readonly ownerGid: string;
    /**
     * Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
     *
     * @stability stable
     */
    readonly permissions: string;
}
/**
 * Represents the PosixUser.
 *
 * @stability stable
 */
export interface PosixUser {
    /**
     * The POSIX user ID used for all file system operations using this access point.
     *
     * @stability stable
     */
    readonly uid: string;
    /**
     * The POSIX group ID used for all file system operations using this access point.
     *
     * @stability stable
     */
    readonly gid: string;
    /**
     * Secondary POSIX group IDs used for all file system operations using this access point.
     *
     * @default - None
     * @stability stable
     */
    readonly secondaryGids?: string[];
}
/**
 * Options to create an AccessPoint.
 *
 * @stability stable
 */
export interface AccessPointOptions {
    /**
     * Specifies the POSIX IDs and permissions to apply when creating the access point's root directory.
     *
     * If the
     * root directory specified by `path` does not exist, EFS creates the root directory and applies the
     * permissions specified here. If the specified `path` does not exist, you must specify `createAcl`.
     *
     * @default - None. The directory specified by `path` must exist.
     * @stability stable
     */
    readonly createAcl?: Acl;
    /**
     * Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system.
     *
     * @default '/'
     * @stability stable
     */
    readonly path?: string;
    /**
     * The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.
     *
     * Specify this to enforce a user identity using an access point.
     *
     * @default - user identity not enforced
     * @see - [Enforcing a User Identity Using an Access Point](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html)
     * @stability stable
     */
    readonly posixUser?: PosixUser;
}
/**
 * Properties for the AccessPoint.
 *
 * @stability stable
 */
export interface AccessPointProps extends AccessPointOptions {
    /**
     * The efs filesystem.
     *
     * @stability stable
     */
    readonly fileSystem: IFileSystem;
}
/**
 * Attributes that can be specified when importing an AccessPoint.
 *
 * @stability stable
 */
export interface AccessPointAttributes {
    /**
     * The ID of the AccessPoint One of this, or {@link accessPointArn} is required.
     *
     * @default - determined based on accessPointArn
     * @stability stable
     */
    readonly accessPointId?: string;
    /**
     * The ARN of the AccessPoint One of this, or {@link accessPointId} is required.
     *
     * @default - determined based on accessPointId
     * @stability stable
     */
    readonly accessPointArn?: string;
    /**
     * The EFS file system.
     *
     * @default - no EFS file system
     * @stability stable
     */
    readonly fileSystem?: IFileSystem;
}
declare abstract class AccessPointBase extends Resource implements IAccessPoint {
    /**
     * The ARN of the Access Point
     * @attribute
     */
    abstract readonly accessPointArn: string;
    /**
     * The ID of the Access Point
     * @attribute
     */
    abstract readonly accessPointId: string;
    /**
     * The file system of the access point
     */
    abstract readonly fileSystem: IFileSystem;
}
/**
 * Represents the AccessPoint.
 *
 * @stability stable
 */
export declare class AccessPoint extends AccessPointBase {
    /**
     * Import an existing Access Point by attributes.
     *
     * @stability stable
     */
    static fromAccessPointAttributes(scope: Construct, id: string, attrs: AccessPointAttributes): IAccessPoint;
    /**
     * Import an existing Access Point by id.
     *
     * @stability stable
     */
    static fromAccessPointId(scope: Construct, id: string, accessPointId: string): IAccessPoint;
    /**
     * The ARN of the Access Point.
     *
     * @stability stable
     * @attribute true
     */
    readonly accessPointArn: string;
    /**
     * The ID of the Access Point.
     *
     * @stability stable
     * @attribute true
     */
    readonly accessPointId: string;
    /**
     * The file system of the access point.
     *
     * @stability stable
     */
    readonly fileSystem: IFileSystem;
    /**
     * @stability stable
     */
    constructor(scope: Construct, id: string, props: AccessPointProps);
}
export {};
