{
  "author": {
    "name": "Amazon.com",
    "organization": true,
    "roles": [
      "author"
    ]
  },
  "dependencies": {
    "@aws-cdk/cloud-assembly-schema": "^1.84.0",
    "@aws-cdk/core": "^1.84.0",
    "@aws-cdk/cx-api": "^1.84.0"
  },
  "dependencyClosure": {
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "Generate directly usable AWS CloudFormation template.",
  "docs": {
    "stability": "stable"
  },
  "homepage": "github.com/aws-samples/cdk-bootstrapless-synthesizer",
  "jsiiVersion": "1.29.0 (build 41df200)",
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      }
    }
  },
  "name": "cdk-bootstrapless-synthesizer",
  "readme": {
    "markdown": "# cdk-bootstrapless-synthesizer\n\n[![npm version](https://img.shields.io/npm/v/cdk-bootstrapless-synthesizer)](https://www.npmjs.com/package/cdk-bootstrapless-synthesizer)\n[![downloads](https://img.shields.io/npm/dw/cdk-bootstrapless-synthesizer)](https://www.npmjs.com/package/cdk-bootstrapless-synthesizer)\n\nA bootstrapless stack synthesizer that is designated to generate templates that can be directly used by AWS CloudFormation\n\n## Usage\n\n```ts\nimport { BootstraplessStackSynthesizer } from 'cdk-bootstrapless-synthesizer';\n\n// ...\nconst app = new cdk.App();\n\n// You can set arguments directly\nnew MyWidgetServiceStack(app, 'MyWidgetServiceStack', {\n  synthesizer: new BootstraplessStackSynthesizer({\n    templateBucketName: 'cfn-template-bucket',\n    imageAssetRepositoryName: 'ecr-repo-name',\n\n    fileAssetBucketName: 'file-asset-bucket-${AWS::Region}',\n    fileAssetRegionSet: ['us-east-1'],\n    fileAssetPrefix: 'file-asset-prefix/latest/',\n\n    imageAssetTag: 'docker-image-tag',\n    imageAssetRegion: 'us-east-1',\n    imageAssetAccountId: '1234567890',\n  })\n});\n\n// Or by environment variables\n// export BSS_TEMPLATE_BUCKET_NAME=\"cfn-template-bucket\"\n// export BSS_IMAGE_ASSET_REPOSITORY_NAME=\"ecr-repo-name\"\n// export BSS_FILE_ASSET_BUCKET_NAME=\"file-asset-bucket-\\${AWS::Region}\"\n// export BSS_FILE_ASSET_REGION_SET=\"us-east-1,us-west-1\"\n// export BSS_FILE_ASSET_PREFIX=\"file-asset-prefix/latest/\"\n// export BSS_IMAGE_ASSET_TAG=\"docker-image-tag\"\n// export BSS_IMAGE_ASSET_REGION=\"us-east-1\"\n// export BSS_IMAGE_ASSET_ACCOUNT_ID=\"1234567890\"\nnew MyWidgetServiceStack(app, 'MyWidgetServiceStack', {\n  synthesizer: new BootstraplessStackSynthesizer()\n});\n```\n\nSynth AWS CloudFormation templates, assets and upload them\n\n```shell\n$ cdk synth\n$ npx cdk-assets publish -p cdk.out/MyWidgetServiceStack.assets.json -v\n```\n\nIn your template\n\n```json\n{\n  // ...\n  \"MyLayer38944FA5\": {\n    \"Type\": \"AWS::Lambda::LayerVersion\",\n    \"Properties\": {\n      \"Content\": {\n        \"S3Bucket\": {\n          \"Fn::Sub\": \"file-asset-bucket-${AWS::Region}\"\n        },\n        \"S3Key\": \"file-asset-prefix/latest/8104f93f351dd2d4e69b0ab2ebe9ccff2309a573660bd75ca920ffd1808522e0.zip\"\n      }\n    }\n  }\n  // ...\n}\n```\n\n## Sample Project\n\nSee [Sample Project](./sample/README.md)\n\n## API Reference\n\nSee [API Reference](./API.md) for API details.\n"
  },
  "repository": {
    "type": "git",
    "url": "github.com/aws-samples/cdk-bootstrapless-synthesizer"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "js": {
      "npm": "cdk-bootstrapless-synthesizer"
    }
  },
  "types": {
    "cdk-bootstrapless-synthesizer.BootstraplessStackSynthesizer": {
      "assembly": "cdk-bootstrapless-synthesizer",
      "base": "@aws-cdk/core.StackSynthesizer",
      "docs": {
        "stability": "stable",
        "summary": "A Bootstrapless stack synthesizer that is designated to generate templates that can be directly used by Cloudformation."
      },
      "fqn": "cdk-bootstrapless-synthesizer.BootstraplessStackSynthesizer",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "src/index.ts",
          "line": 136
        },
        "parameters": [
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "cdk-bootstrapless-synthesizer.BootstraplessStackSynthesizerProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 119
      },
      "methods": [
        {
          "docs": {
            "remarks": "Returns the parameters that can be used to refer to the asset inside the template.",
            "stability": "stable",
            "summary": "Register a Docker Image Asset."
          },
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 254
          },
          "name": "addDockerImageAsset",
          "overrides": "@aws-cdk/core.StackSynthesizer",
          "parameters": [
            {
              "name": "asset",
              "type": {
                "fqn": "@aws-cdk/core.DockerImageAssetSource"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/core.DockerImageAssetLocation"
            }
          }
        },
        {
          "docs": {
            "remarks": "Returns the parameters that can be used to refer to the asset inside the template.",
            "stability": "stable",
            "summary": "Register a File Asset."
          },
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 199
          },
          "name": "addFileAsset",
          "overrides": "@aws-cdk/core.StackSynthesizer",
          "parameters": [
            {
              "name": "asset",
              "type": {
                "fqn": "@aws-cdk/core.FileAssetSource"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/core.FileAssetLocation"
            }
          }
        },
        {
          "docs": {
            "remarks": "Must be called before any of the other methods are called.",
            "stability": "stable",
            "summary": "Bind to the stack this environment is going to be used on."
          },
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 167
          },
          "name": "bind",
          "overrides": "@aws-cdk/core.StackSynthesizer",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "@aws-cdk/core.Stack"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Dumps current manifest into JSON format."
          },
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 292
          },
          "name": "dumps",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Synthesize the associated stack to the session."
          },
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 304
          },
          "name": "synthesize",
          "overrides": "@aws-cdk/core.StackSynthesizer",
          "parameters": [
            {
              "name": "session",
              "type": {
                "fqn": "@aws-cdk/core.ISynthesisSession"
              }
            }
          ]
        }
      ],
      "name": "BootstraplessStackSynthesizer",
      "properties": [
        {
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 320
          },
          "name": "stack",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/core.Stack"
          }
        }
      ]
    },
    "cdk-bootstrapless-synthesizer.BootstraplessStackSynthesizerProps": {
      "assembly": "cdk-bootstrapless-synthesizer",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Configuration properties for BootstraplessStackSynthesizer."
      },
      "fqn": "cdk-bootstrapless-synthesizer.BootstraplessStackSynthesizerProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "src/index.ts",
        "line": 14
      },
      "name": "BootstraplessStackSynthesizerProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "required": "if you have file assets"
            },
            "default": "- process.env.BSS_FILE_ASSET_BUCKET_NAME",
            "remarks": "You must supply this if you have given a non-standard name to the staging bucket.\n\nThe placeholders `${AWS::AccountId}` and `${AWS::Region}` will\nbe replaced with the values of qualifier and the stack's account and region,\nrespectively.",
            "stability": "stable",
            "summary": "Name of the S3 bucket to hold file assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 27
          },
          "name": "fileAssetBucketName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.env.BSS_FILE_ASSET_PREFIX",
            "stability": "stable",
            "summary": "Object key prefix to use while storing S3 Assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 74
          },
          "name": "fileAssetPrefix",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.env.BSS_FILE_ASSET_PUBLISHING_ROLE_ARN",
            "remarks": "You must supply this if you have given a non-standard name to the publishing role.\n\nThe placeholders `${AWS::AccountId}` and `${AWS::Region}` will\nbe replaced with the values of qualifier and the stack's account and region,\nrespectively.",
            "stability": "stable",
            "summary": "The role to use to publish file assets to the S3 bucket in this environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 54
          },
          "name": "fileAssetPublishingRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.env.BSS_FILE_ASSET_REGION_SET // comma delimited list",
            "remarks": "For examples:\n`['us-east-1', 'us-west-1']`",
            "stability": "stable",
            "summary": "The regions set of file assets to be published only when `fileAssetBucketName` contains `${AWS::Region}`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 84
          },
          "name": "fileAssetRegionSet",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.env.BSS_IMAGE_ASSET_ACCOUNT_ID",
            "stability": "stable",
            "summary": "Override the ECR repository account id of the Docker Image assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 112
          },
          "name": "imageAssetAccountId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.env.BSS_IMAGE_ASSET_PUBLISHING_ROLE_ARN",
            "remarks": "You must supply this if you have given a non-standard name to the publishing role.\n\nThe placeholders `${AWS::AccountId}` and `${AWS::Region}` will\nbe replaced with the values of qualifier and the stack's account and region,\nrespectively.",
            "stability": "stable",
            "summary": "The role to use to publish image assets to the ECR repository in this environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 67
          },
          "name": "imageAssetPublishingRoleArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.env.BSS_IMAGE_ASSET_REGION",
            "stability": "stable",
            "summary": "Override the ECR repository region of the Docker Image assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 105
          },
          "name": "imageAssetRegion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "required": "if you have docker image assets"
            },
            "default": "- process.env.BSS_IMAGE_ASSET_REPOSITORY_NAME",
            "remarks": "You must supply this if you have given a non-standard name to the ECR repository.\n\nThe placeholders `${AWS::AccountId}` and `${AWS::Region}` will\nbe replaced with the values of qualifier and the stack's account and region,\nrespectively.",
            "stability": "stable",
            "summary": "Name of the ECR repository to hold Docker Image assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 41
          },
          "name": "imageAssetRepositoryName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.env.BSS_IMAGE_ASSET_TAG",
            "stability": "stable",
            "summary": "Override the tag of the Docker Image assets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 98
          },
          "name": "imageAssetTag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- process.env.BSS_TEMPLATE_BUCKET_NAME",
            "stability": "stable",
            "summary": "Override the name of the S3 bucket to hold Cloudformation template."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "src/index.ts",
            "line": 91
          },
          "name": "templateBucketName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "0.7.2",
  "fingerprint": "INgHSlqGQKXVMiOZ2SeaStLlfOsIblitnz91Crxy+HE="
}
