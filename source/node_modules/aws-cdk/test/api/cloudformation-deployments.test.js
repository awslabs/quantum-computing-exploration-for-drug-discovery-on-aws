"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../../lib/api/deploy-stack');
const cloudformation_deployments_1 = require("../../lib/api/cloudformation-deployments");
const deploy_stack_1 = require("../../lib/api/deploy-stack");
const toolkit_info_1 = require("../../lib/api/toolkit-info");
const util_1 = require("../util");
const mock_sdk_1 = require("../util/mock-sdk");
let sdkProvider;
let deployments;
let mockToolkitInfoLookup;
beforeEach(() => {
    jest.resetAllMocks();
    sdkProvider = new mock_sdk_1.MockSdkProvider();
    deployments = new cloudformation_deployments_1.CloudFormationDeployments({ sdkProvider });
    toolkit_info_1.ToolkitInfo.lookup = mockToolkitInfoLookup = jest.fn().mockResolvedValue(toolkit_info_1.ToolkitInfo.bootstrapStackNotFoundInfo(sdkProvider.sdk));
});
function mockSuccessfulBootstrapStackLookup(props) {
    const outputs = {
        BucketName: 'BUCKET_NAME',
        BucketDomainName: 'BUCKET_ENDPOINT',
        BootstrapVersion: '1',
        ...props,
    };
    const fakeStack = mock_sdk_1.mockBootstrapStack(sdkProvider.sdk, {
        Outputs: Object.entries(outputs).map(([k, v]) => ({
            OutputKey: k,
            OutputValue: `${v}`,
        })),
    });
    mockToolkitInfoLookup.mockResolvedValue(toolkit_info_1.ToolkitInfo.fromStack(fakeStack, sdkProvider.sdk));
}
test('passes through hotswap=true to deployStack()', async () => {
    // WHEN
    await deployments.deployStack({
        stack: util_1.testStack({
            stackName: 'boop',
        }),
        hotswap: true,
    });
    // THEN
    expect(deploy_stack_1.deployStack).toHaveBeenCalledWith(expect.objectContaining({
        hotswap: true,
    }));
});
test('placeholders are substituted in CloudFormation execution role', async () => {
    await deployments.deployStack({
        stack: util_1.testStack({
            stackName: 'boop',
            properties: {
                cloudFormationExecutionRoleArn: 'bloop:${AWS::Region}:${AWS::AccountId}',
            },
        }),
    });
    expect(deploy_stack_1.deployStack).toHaveBeenCalledWith(expect.objectContaining({
        roleArn: 'bloop:here:123456789012',
    }));
});
test('role with placeholders is assumed if assumerole is given', async () => {
    const mockForEnvironment = jest.fn();
    sdkProvider.forEnvironment = mockForEnvironment;
    await deployments.deployStack({
        stack: util_1.testStack({
            stackName: 'boop',
            properties: {
                assumeRoleArn: 'bloop:${AWS::Region}:${AWS::AccountId}',
            },
        }),
    });
    expect(mockForEnvironment).toHaveBeenCalledWith(expect.anything(), expect.anything(), expect.objectContaining({
        assumeRoleArn: 'bloop:here:123456789012',
    }));
});
test('deployment fails if bootstrap stack is missing', async () => {
    await expect(deployments.deployStack({
        stack: util_1.testStack({
            stackName: 'boop',
            properties: {
                assumeRoleArn: 'bloop:${AWS::Region}:${AWS::AccountId}',
                requiresBootstrapStackVersion: 99,
            },
        }),
    })).rejects.toThrow(/requires a bootstrap stack/);
});
test('deployment fails if bootstrap stack is too old', async () => {
    mockSuccessfulBootstrapStackLookup({
        BootstrapVersion: 5,
    });
    await expect(deployments.deployStack({
        stack: util_1.testStack({
            stackName: 'boop',
            properties: {
                assumeRoleArn: 'bloop:${AWS::Region}:${AWS::AccountId}',
                requiresBootstrapStackVersion: 99,
            },
        }),
    })).rejects.toThrow(/requires bootstrap stack version '99', found '5'/);
});
test('if toolkit stack cannot be found but SSM parameter name is present deployment succeeds', async () => {
    // FIXME: Mocking a successful bootstrap stack lookup here should not be necessary.
    // This should fail and return a placeholder failure object.
    mockSuccessfulBootstrapStackLookup({
        BootstrapVersion: 2,
    });
    let requestedParameterName;
    sdkProvider.stubSSM({
        getParameter(request) {
            requestedParameterName = request.Name;
            return {
                Parameter: {
                    Value: '99',
                },
            };
        },
    });
    await deployments.deployStack({
        stack: util_1.testStack({
            stackName: 'boop',
            properties: {
                assumeRoleArn: 'bloop:${AWS::Region}:${AWS::AccountId}',
                requiresBootstrapStackVersion: 99,
                bootstrapStackVersionSsmParameter: '/some/parameter',
            },
        }),
    });
    expect(requestedParameterName).toEqual('/some/parameter');
});
//# sourceMappingURL=data:application/json;base64,