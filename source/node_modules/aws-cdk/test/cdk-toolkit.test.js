"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const bootstrap_1 = require("../lib/api/bootstrap");
const cloudformation_deployments_1 = require("../lib/api/cloudformation-deployments");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
const diff_1 = require("../lib/diff");
const util_1 = require("./util");
let cloudExecutable;
let bootstrapper;
beforeEach(() => {
    bootstrapper = util_1.instanceMockFrom(bootstrap_1.Bootstrapper);
    bootstrapper.bootstrapEnvironment.mockResolvedValue({ noOp: false, outputs: {} });
    cloudExecutable = new util_1.MockCloudExecutable({
        stacks: [
            MockStack.MOCK_STACK_A,
            MockStack.MOCK_STACK_B,
        ],
        nestedAssemblies: [{
                stacks: [MockStack.MOCK_STACK_C],
            }],
    });
});
function defaultToolkitSetup() {
    return new cdk_toolkit_1.CdkToolkit({
        cloudExecutable,
        configuration: cloudExecutable.configuration,
        sdkProvider: cloudExecutable.sdkProvider,
        cloudFormation: new FakeCloudFormation({
            'Test-Stack-A': { Foo: 'Bar' },
            'Test-Stack-B': { Baz: 'Zinga!' },
            'Test-Stack-C': { Baz: 'Zinga!' },
        }),
    });
}
describe('deploy', () => {
    test('fails when no valid stack names are given', async () => {
        // GIVEN
        const toolkit = defaultToolkitSetup();
        // WHEN
        await expect(() => toolkit.deploy({ selector: { patterns: ['Test-Stack-D'] } })).rejects.toThrow('No stacks match the name(s) Test-Stack-D');
    });
    describe('with hotswap deployment', () => {
        test("passes through the 'hotswap' option to CloudFormationDeployments.deployStack()", async () => {
            // GIVEN
            const mockCfnDeployments = util_1.instanceMockFrom(cloudformation_deployments_1.CloudFormationDeployments);
            mockCfnDeployments.deployStack.mockReturnValue(Promise.resolve({
                noOp: false,
                outputs: {},
                stackArn: 'stackArn',
                stackArtifact: util_1.instanceMockFrom(cxapi.CloudFormationStackArtifact),
            }));
            const cdkToolkit = new cdk_toolkit_1.CdkToolkit({
                cloudExecutable,
                configuration: cloudExecutable.configuration,
                sdkProvider: cloudExecutable.sdkProvider,
                cloudFormation: mockCfnDeployments,
            });
            // WHEN
            await cdkToolkit.deploy({
                selector: { patterns: ['Test-Stack-A'] },
                requireApproval: diff_1.RequireApproval.Never,
                hotswap: true,
            });
            // THEN
            expect(mockCfnDeployments.deployStack).toHaveBeenCalledWith(expect.objectContaining({
                hotswap: true,
            }));
        });
    });
    describe('makes correct CloudFormation calls', () => {
        test('without options', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.deploy({ selector: { patterns: ['Test-Stack-A', 'Test-Stack-B'] } });
        });
        test('with stacks all stacks specified as double wildcard', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.deploy({ selector: { patterns: ['**'] } });
        });
        test('with one stack specified', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.deploy({ selector: { patterns: ['Test-Stack-A'] } });
        });
        test('with stacks all stacks specified as wildcard', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.deploy({ selector: { patterns: ['*'] } });
        });
        test('with sns notification arns', async () => {
            // GIVEN
            const notificationArns = ['arn:aws:sns:::cfn-notifications', 'arn:aws:sns:::my-cool-topic'];
            const toolkit = new cdk_toolkit_1.CdkToolkit({
                cloudExecutable,
                configuration: cloudExecutable.configuration,
                sdkProvider: cloudExecutable.sdkProvider,
                cloudFormation: new FakeCloudFormation({
                    'Test-Stack-A': { Foo: 'Bar' },
                    'Test-Stack-B': { Baz: 'Zinga!' },
                }, notificationArns),
            });
            // WHEN
            await toolkit.deploy({
                selector: { patterns: ['Test-Stack-A', 'Test-Stack-B'] },
                notificationArns,
            });
        });
        test('globless bootstrap uses environment without question', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.bootstrap(['aws://56789/south-pole'], bootstrapper, {});
            // THEN
            expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledWith({
                account: '56789',
                region: 'south-pole',
                name: 'aws://56789/south-pole',
            }, expect.anything(), expect.anything());
            expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledTimes(1);
        });
        test('globby bootstrap uses whats in the stacks', async () => {
            // GIVEN
            const toolkit = defaultToolkitSetup();
            cloudExecutable.configuration.settings.set(['app'], 'something');
            // WHEN
            await toolkit.bootstrap(['aws://*/bermuda-triangle-1'], bootstrapper, {});
            // THEN
            expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledWith({
                account: '123456789012',
                region: 'bermuda-triangle-1',
                name: 'aws://123456789012/bermuda-triangle-1',
            }, expect.anything(), expect.anything());
            expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledTimes(1);
        });
        test('bootstrap can be invoked without the --app argument', async () => {
            // GIVEN
            cloudExecutable.configuration.settings.clear();
            const mockSynthesize = jest.fn();
            cloudExecutable.synthesize = mockSynthesize;
            const toolkit = defaultToolkitSetup();
            // WHEN
            await toolkit.bootstrap(['aws://123456789012/west-pole'], bootstrapper, {});
            // THEN
            expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledWith({
                account: '123456789012',
                region: 'west-pole',
                name: 'aws://123456789012/west-pole',
            }, expect.anything(), expect.anything());
            expect(bootstrapper.bootstrapEnvironment).toHaveBeenCalledTimes(1);
            expect(cloudExecutable.hasApp).toEqual(false);
            expect(mockSynthesize).not.toHaveBeenCalled();
        });
    });
});
describe('synth', () => {
    test('with no stdout option', async () => {
        // GIVE
        const toolkit = defaultToolkitSetup();
        // THEN
        await expect(toolkit.synth(['Test-Stack-A'], false, true)).resolves.toBeUndefined();
    });
    describe('post-synth validation', () => {
        beforeEach(() => {
            cloudExecutable = new util_1.MockCloudExecutable({
                stacks: [
                    MockStack.MOCK_STACK_A,
                    MockStack.MOCK_STACK_B,
                ],
                nestedAssemblies: [{
                        stacks: [MockStack.MOCK_STACK_WITH_ERROR],
                    }],
            });
        });
    });
    afterEach(() => {
        process.env.STACKS_TO_VALIDATE = undefined;
    });
    describe('stack with error and flagged for validation', () => {
        beforeEach(() => {
            cloudExecutable = new util_1.MockCloudExecutable({
                stacks: [
                    MockStack.MOCK_STACK_A,
                    MockStack.MOCK_STACK_B,
                ],
                nestedAssemblies: [{
                        stacks: [
                            { properties: { validateOnSynth: true }, ...MockStack.MOCK_STACK_WITH_ERROR },
                        ],
                    }],
            });
        });
        test('causes synth to fail if autoValidate=true', async () => {
            const toolkit = defaultToolkitSetup();
            const autoValidate = true;
            await expect(toolkit.synth([], false, true, autoValidate)).rejects.toBeDefined();
        });
        test('causes synth to succeed if autoValidate=false', async () => {
            const toolkit = defaultToolkitSetup();
            const autoValidate = false;
            await expect(toolkit.synth([], false, true, autoValidate)).resolves.toBeUndefined();
        });
    });
    test('stack has error and was explicitly selected', async () => {
        cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_A,
                MockStack.MOCK_STACK_B,
            ],
            nestedAssemblies: [{
                    stacks: [
                        { properties: { validateOnSynth: false }, ...MockStack.MOCK_STACK_WITH_ERROR },
                    ],
                }],
        });
        const toolkit = defaultToolkitSetup();
        await expect(toolkit.synth(['Test-Stack-A/witherrors'], false, true)).rejects.toBeDefined();
    });
    test('stack has error, is not flagged for validation and was not explicitly selected', async () => {
        cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_A,
                MockStack.MOCK_STACK_B,
            ],
            nestedAssemblies: [{
                    stacks: [
                        { properties: { validateOnSynth: false }, ...MockStack.MOCK_STACK_WITH_ERROR },
                    ],
                }],
        });
        const toolkit = defaultToolkitSetup();
        await toolkit.synth([], false, true);
    });
    test('stack has dependency and was explicitly selected', async () => {
        cloudExecutable = new util_1.MockCloudExecutable({
            stacks: [
                MockStack.MOCK_STACK_C,
                MockStack.MOCK_STACK_D,
            ],
        });
        const toolkit = defaultToolkitSetup();
        await expect(toolkit.synth([MockStack.MOCK_STACK_D.stackName], true, false)).resolves.toBeDefined();
    });
});
class MockStack {
}
MockStack.MOCK_STACK_A = {
    stackName: 'Test-Stack-A',
    template: { Resources: { TemplateName: 'Test-Stack-A' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-A': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Foo', value: 'Bar' },
                ],
            },
        ],
    },
};
MockStack.MOCK_STACK_B = {
    stackName: 'Test-Stack-B',
    template: { Resources: { TemplateName: 'Test-Stack-B' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-B': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Baz', value: 'Zinga!' },
                ],
            },
        ],
    },
};
MockStack.MOCK_STACK_C = {
    stackName: 'Test-Stack-C',
    template: { Resources: { TemplateName: 'Test-Stack-C' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-C': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Baz', value: 'Zinga!' },
                ],
            },
        ],
    },
    displayName: 'Test-Stack-A/Test-Stack-C',
};
MockStack.MOCK_STACK_D = {
    stackName: 'Test-Stack-D',
    template: { Resources: { TemplateName: 'Test-Stack-D' } },
    env: 'aws://123456789012/bermuda-triangle-1',
    metadata: {
        '/Test-Stack-D': [
            {
                type: cxschema.ArtifactMetadataEntryType.STACK_TAGS,
                data: [
                    { key: 'Baz', value: 'Zinga!' },
                ],
            },
        ],
    },
    depends: [MockStack.MOCK_STACK_C.stackName],
};
MockStack.MOCK_STACK_WITH_ERROR = {
    stackName: 'witherrors',
    env: 'aws://123456789012/bermuda-triangle-1',
    template: { resource: 'errorresource' },
    metadata: {
        '/resource': [
            {
                type: cxschema.ArtifactMetadataEntryType.ERROR,
                data: 'this is an error',
            },
        ],
    },
    displayName: 'Test-Stack-A/witherrors',
};
class FakeCloudFormation extends cloudformation_deployments_1.CloudFormationDeployments {
    constructor(expectedTags = {}, expectedNotificationArns) {
        super({ sdkProvider: undefined });
        this.expectedTags = {};
        for (const [stackName, tags] of Object.entries(expectedTags)) {
            this.expectedTags[stackName] =
                Object.entries(tags).map(([Key, Value]) => ({ Key, Value }))
                    .sort((l, r) => l.Key.localeCompare(r.Key));
        }
        if (expectedNotificationArns) {
            this.expectedNotificationArns = expectedNotificationArns;
        }
    }
    deployStack(options) {
        expect([MockStack.MOCK_STACK_A.stackName, MockStack.MOCK_STACK_B.stackName, MockStack.MOCK_STACK_C.stackName])
            .toContain(options.stack.stackName);
        expect(options.tags).toEqual(this.expectedTags[options.stack.stackName]);
        expect(options.notificationArns).toEqual(this.expectedNotificationArns);
        return Promise.resolve({
            stackArn: `arn:aws:cloudformation:::stack/${options.stack.stackName}/MockedOut`,
            noOp: false,
            outputs: { StackName: options.stack.stackName },
            stackArtifact: options.stack,
        });
    }
    readCurrentTemplate(stack) {
        switch (stack.stackName) {
            case MockStack.MOCK_STACK_A.stackName:
                return Promise.resolve({});
            case MockStack.MOCK_STACK_B.stackName:
                return Promise.resolve({});
            case MockStack.MOCK_STACK_C.stackName:
                return Promise.resolve({});
            default:
                return Promise.reject(`Not an expected mock stack: ${stack.stackName}`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,