export declare const enum SupportLevel {
    /**
     * Soft-deprecated, removed as of releases made starting at DEADLINE. This
     * will output a yellow warning to the console, until the DEADLINE has been
     * reached, at which point it'll be a SCARY RED WARNING.
     */
    DEPRECATED = "deprecated",
    /**
     * Supported releases, nothing to see. No message will be output.
     */
    SUPPORTED = "supported",
    /**
     * EOL releases are unsupported, so this will emit a SCARY RED WARNING.
     */
    END_OF_LIFE = "end-of-life",
    /**
     * Not end-of-life, but also not supported. This is usually the case for early
     * releases on a new major train, where some of the features are not available
     * yet. These emit a SCARY RED WARNING, but the messaging is slightly
     * different than that of END_OF_LIFE.
     */
    UNSUPPORTED = "unsupported",
    /**
     * Those releases are newer than the current software package, so we have not
     * tested with it. People may encounter all kinds of weird bugs, especially
     * early in the release cycle... So we'll issue a yellow warning here.
     */
    UNTESTED = "untested"
}
/**
 * The deadline after which deprecated releases will move to
 * `SupportLevel.END_OF_LIFE`.
 */
export declare const DEADLINE = "2021-09-01";
/**
 * The DEADLINE, expressed in milliseconds since the epoch.
 */
export declare const DEADLINE_EPOCH_MS: number;
/**
 * For each SemVer range, what is the support level for such versions of Node.
 * The ranges are checked in declaration order (so it is a good idea to keep the
 * left-open ranges at the beginning, and the right-open ranges at the end.
 * First match wins.
 *
 * Also, if you are setting a new entry to `SupportLevel.DEPRECATED`, do not
 * forget to also change the `DEADLINE` value.
 */
export declare const VERSION_SUPPORT: {
    readonly [range: string]: SupportLevel;
};
