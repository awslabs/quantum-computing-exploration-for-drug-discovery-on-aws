"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkNode = void 0;
const chalk_1 = require("chalk");
const console_1 = require("console");
const process_1 = require("process");
const semver_1 = require("semver");
const constants_1 = require("./constants");
/**
 * Checks the current process' node runtime version against the release support
 * matrix, and issues a warning to STDERR if the current version is not fully
 * supported (i.e: it is deprecated, end-of-life, or untested).
 */
function checkNode() {
    const runtimeVersion = new semver_1.SemVer(process_1.version);
    let versionSupportLevel = "untested" /* UNTESTED */;
    for (const [rangeExpr, supportLevel] of Object.entries(constants_1.VERSION_SUPPORT)) {
        const range = new semver_1.Range(rangeExpr);
        if (range.test(runtimeVersion)) {
            versionSupportLevel = supportLevel;
            break;
        }
    }
    switch (versionSupportLevel) {
        case "deprecated" /* DEPRECATED */:
            const deadlinePast = Date.now() > constants_1.DEADLINE_EPOCH_MS;
            veryVisibleMessage(deadlinePast ? chalk_1.bgRed.white.bold : chalk_1.bgYellowBright.black, `Node ${process_1.version} has reached end-of-life and will no longer be supported in new releases after ${constants_1.DEADLINE}.`, `Please upgrade to a supported node version as soon as possible.`);
            break;
        case "end-of-life" /* END_OF_LIFE */:
            veryVisibleMessage(chalk_1.bgRed.white.bold, `Node ${process_1.version} has reached end-of-life and is not supported.`);
            break;
        case "unsupported" /* UNSUPPORTED */:
            veryVisibleMessage(chalk_1.bgRed.white.bold, `Node ${process_1.version} is not supported. Early releases a node major often lack essential features of that line.`);
            break;
        case "supported" /* SUPPORTED */:
            // Nothing to do
            break;
        case "untested" /* UNTESTED */:
            veryVisibleMessage(chalk_1.bgYellow.black, `This software has not been tested with node ${process_1.version}.`);
            break;
    }
    function veryVisibleMessage(chalk, message, callToAction = 'You may to encounter runtime issues, and should switch to a supported release.') {
        const lines = [
            message,
            callToAction,
            '',
            'As of the current release, supported versions of node are:',
            ...Object.entries(constants_1.VERSION_SUPPORT)
                .filter(([, supportLevel]) => supportLevel === "supported" /* SUPPORTED */)
                .map(([rangeExpr]) => `- ${rangeExpr}`),
        ];
        const len = Math.max(...lines.map((l) => l.length));
        const border = chalk('!'.repeat(len + 8));
        const spacer = chalk(`!!  ${' '.repeat(len)}  !!`);
        console_1.error(border);
        console_1.error(spacer);
        for (const line of lines) {
            console_1.error(chalk(`!!  ${line.padEnd(len, ' ')}  !!`));
        }
        console_1.error(spacer);
        console_1.error(border);
    }
}
exports.checkNode = checkNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQStEO0FBQy9ELHFDQUFnQztBQUNoQyxxQ0FBa0M7QUFDbEMsbUNBQXVDO0FBRXZDLDJDQUtxQjtBQUVyQjs7OztHQUlHO0FBQ0gsU0FBZ0IsU0FBUztJQUN2QixNQUFNLGNBQWMsR0FBRyxJQUFJLGVBQU0sQ0FBQyxpQkFBTyxDQUFDLENBQUM7SUFDM0MsSUFBSSxtQkFBbUIsNEJBQXdCLENBQUM7SUFDaEQsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsMkJBQWUsQ0FBQyxFQUFFO1FBQ3ZFLE1BQU0sS0FBSyxHQUFHLElBQUksY0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25DLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUM5QixtQkFBbUIsR0FBRyxZQUFZLENBQUM7WUFDbkMsTUFBTTtTQUNQO0tBQ0Y7SUFFRCxRQUFRLG1CQUFtQixFQUFFO1FBQzNCO1lBQ0UsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLDZCQUFpQixDQUFDO1lBQ3BELGtCQUFrQixDQUNoQixZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxzQkFBYyxDQUFDLEtBQUssRUFDdEQsUUFBUSxpQkFBTyxrRkFBa0Ysb0JBQVEsR0FBRyxFQUM1RyxpRUFBaUUsQ0FDbEUsQ0FBQztZQUNGLE1BQU07UUFDUjtZQUNFLGtCQUFrQixDQUNoQixhQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFDaEIsUUFBUSxpQkFBTyxnREFBZ0QsQ0FDaEUsQ0FBQztZQUNGLE1BQU07UUFDUjtZQUNFLGtCQUFrQixDQUNoQixhQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFDaEIsUUFBUSxpQkFBTyw0RkFBNEYsQ0FDNUcsQ0FBQztZQUNGLE1BQU07UUFDUjtZQUNFLGdCQUFnQjtZQUNoQixNQUFNO1FBQ1I7WUFDRSxrQkFBa0IsQ0FDaEIsZ0JBQVEsQ0FBQyxLQUFLLEVBQ2QsK0NBQStDLGlCQUFPLEdBQUcsQ0FDMUQsQ0FBQztZQUNGLE1BQU07S0FDVDtJQUVELFNBQVMsa0JBQWtCLENBQ3pCLEtBQVksRUFDWixPQUFlLEVBQ2YsWUFBWSxHQUFHLGdGQUFnRjtRQUUvRixNQUFNLEtBQUssR0FBRztZQUNaLE9BQU87WUFDUCxZQUFZO1lBQ1osRUFBRTtZQUNGLDREQUE0RDtZQUM1RCxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsMkJBQWUsQ0FBQztpQkFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxZQUFZLGdDQUEyQixDQUFDO2lCQUNyRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLFNBQVMsRUFBRSxDQUFDO1NBQzFDLENBQUM7UUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbkQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsZUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDeEIsZUFBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsZUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2QsZUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hCLENBQUM7QUFDSCxDQUFDO0FBckVELDhCQXFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYWxrLCBiZ1llbGxvdywgYmdZZWxsb3dCcmlnaHQsIGJnUmVkIH0gZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHsgZXJyb3IgfSBmcm9tICdjb25zb2xlJztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICdwcm9jZXNzJztcbmltcG9ydCB7IFJhbmdlLCBTZW1WZXIgfSBmcm9tICdzZW12ZXInO1xuXG5pbXBvcnQge1xuICBERUFETElORSxcbiAgREVBRExJTkVfRVBPQ0hfTVMsXG4gIFN1cHBvcnRMZXZlbCxcbiAgVkVSU0lPTl9TVVBQT1JULFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbi8qKlxuICogQ2hlY2tzIHRoZSBjdXJyZW50IHByb2Nlc3MnIG5vZGUgcnVudGltZSB2ZXJzaW9uIGFnYWluc3QgdGhlIHJlbGVhc2Ugc3VwcG9ydFxuICogbWF0cml4LCBhbmQgaXNzdWVzIGEgd2FybmluZyB0byBTVERFUlIgaWYgdGhlIGN1cnJlbnQgdmVyc2lvbiBpcyBub3QgZnVsbHlcbiAqIHN1cHBvcnRlZCAoaS5lOiBpdCBpcyBkZXByZWNhdGVkLCBlbmQtb2YtbGlmZSwgb3IgdW50ZXN0ZWQpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tOb2RlKCk6IHZvaWQge1xuICBjb25zdCBydW50aW1lVmVyc2lvbiA9IG5ldyBTZW1WZXIodmVyc2lvbik7XG4gIGxldCB2ZXJzaW9uU3VwcG9ydExldmVsID0gU3VwcG9ydExldmVsLlVOVEVTVEVEO1xuICBmb3IgKGNvbnN0IFtyYW5nZUV4cHIsIHN1cHBvcnRMZXZlbF0gb2YgT2JqZWN0LmVudHJpZXMoVkVSU0lPTl9TVVBQT1JUKSkge1xuICAgIGNvbnN0IHJhbmdlID0gbmV3IFJhbmdlKHJhbmdlRXhwcik7XG4gICAgaWYgKHJhbmdlLnRlc3QocnVudGltZVZlcnNpb24pKSB7XG4gICAgICB2ZXJzaW9uU3VwcG9ydExldmVsID0gc3VwcG9ydExldmVsO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc3dpdGNoICh2ZXJzaW9uU3VwcG9ydExldmVsKSB7XG4gICAgY2FzZSBTdXBwb3J0TGV2ZWwuREVQUkVDQVRFRDpcbiAgICAgIGNvbnN0IGRlYWRsaW5lUGFzdCA9IERhdGUubm93KCkgPiBERUFETElORV9FUE9DSF9NUztcbiAgICAgIHZlcnlWaXNpYmxlTWVzc2FnZShcbiAgICAgICAgZGVhZGxpbmVQYXN0ID8gYmdSZWQud2hpdGUuYm9sZCA6IGJnWWVsbG93QnJpZ2h0LmJsYWNrLFxuICAgICAgICBgTm9kZSAke3ZlcnNpb259IGhhcyByZWFjaGVkIGVuZC1vZi1saWZlIGFuZCB3aWxsIG5vIGxvbmdlciBiZSBzdXBwb3J0ZWQgaW4gbmV3IHJlbGVhc2VzIGFmdGVyICR7REVBRExJTkV9LmAsXG4gICAgICAgIGBQbGVhc2UgdXBncmFkZSB0byBhIHN1cHBvcnRlZCBub2RlIHZlcnNpb24gYXMgc29vbiBhcyBwb3NzaWJsZS5gLFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU3VwcG9ydExldmVsLkVORF9PRl9MSUZFOlxuICAgICAgdmVyeVZpc2libGVNZXNzYWdlKFxuICAgICAgICBiZ1JlZC53aGl0ZS5ib2xkLFxuICAgICAgICBgTm9kZSAke3ZlcnNpb259IGhhcyByZWFjaGVkIGVuZC1vZi1saWZlIGFuZCBpcyBub3Qgc3VwcG9ydGVkLmAsXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBTdXBwb3J0TGV2ZWwuVU5TVVBQT1JURUQ6XG4gICAgICB2ZXJ5VmlzaWJsZU1lc3NhZ2UoXG4gICAgICAgIGJnUmVkLndoaXRlLmJvbGQsXG4gICAgICAgIGBOb2RlICR7dmVyc2lvbn0gaXMgbm90IHN1cHBvcnRlZC4gRWFybHkgcmVsZWFzZXMgYSBub2RlIG1ham9yIG9mdGVuIGxhY2sgZXNzZW50aWFsIGZlYXR1cmVzIG9mIHRoYXQgbGluZS5gLFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU3VwcG9ydExldmVsLlNVUFBPUlRFRDpcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG9cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU3VwcG9ydExldmVsLlVOVEVTVEVEOlxuICAgICAgdmVyeVZpc2libGVNZXNzYWdlKFxuICAgICAgICBiZ1llbGxvdy5ibGFjayxcbiAgICAgICAgYFRoaXMgc29mdHdhcmUgaGFzIG5vdCBiZWVuIHRlc3RlZCB3aXRoIG5vZGUgJHt2ZXJzaW9ufS5gLFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgZnVuY3Rpb24gdmVyeVZpc2libGVNZXNzYWdlKFxuICAgIGNoYWxrOiBDaGFsayxcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgY2FsbFRvQWN0aW9uID0gJ1lvdSBtYXkgdG8gZW5jb3VudGVyIHJ1bnRpbWUgaXNzdWVzLCBhbmQgc2hvdWxkIHN3aXRjaCB0byBhIHN1cHBvcnRlZCByZWxlYXNlLicsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGxpbmVzID0gW1xuICAgICAgbWVzc2FnZSxcbiAgICAgIGNhbGxUb0FjdGlvbixcbiAgICAgICcnLFxuICAgICAgJ0FzIG9mIHRoZSBjdXJyZW50IHJlbGVhc2UsIHN1cHBvcnRlZCB2ZXJzaW9ucyBvZiBub2RlIGFyZTonLFxuICAgICAgLi4uT2JqZWN0LmVudHJpZXMoVkVSU0lPTl9TVVBQT1JUKVxuICAgICAgICAuZmlsdGVyKChbLCBzdXBwb3J0TGV2ZWxdKSA9PiBzdXBwb3J0TGV2ZWwgPT09IFN1cHBvcnRMZXZlbC5TVVBQT1JURUQpXG4gICAgICAgIC5tYXAoKFtyYW5nZUV4cHJdKSA9PiBgLSAke3JhbmdlRXhwcn1gKSxcbiAgICBdO1xuICAgIGNvbnN0IGxlbiA9IE1hdGgubWF4KC4uLmxpbmVzLm1hcCgobCkgPT4gbC5sZW5ndGgpKTtcbiAgICBjb25zdCBib3JkZXIgPSBjaGFsaygnIScucmVwZWF0KGxlbiArIDgpKTtcbiAgICBjb25zdCBzcGFjZXIgPSBjaGFsayhgISEgICR7JyAnLnJlcGVhdChsZW4pfSAgISFgKTtcblxuICAgIGVycm9yKGJvcmRlcik7XG4gICAgZXJyb3Ioc3BhY2VyKTtcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgIGVycm9yKGNoYWxrKGAhISAgJHtsaW5lLnBhZEVuZChsZW4sICcgJyl9ICAhIWApKTtcbiAgICB9XG4gICAgZXJyb3Ioc3BhY2VyKTtcbiAgICBlcnJvcihib3JkZXIpO1xuICB9XG59XG4iXX0=