"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Docker = void 0;
const fs = require("fs");
const os = require("os");
const path = require("path");
const docker_credentials_1 = require("./docker-credentials");
const shell_1 = require("./shell");
class Docker {
    constructor(logger) {
        this.logger = logger;
        this.configDir = undefined;
    }
    /**
     * Whether an image with the given tag exists
     */
    async exists(tag) {
        try {
            await this.execute(['inspect', tag], { quiet: true });
            return true;
        }
        catch (e) {
            if (e.code !== 'PROCESS_FAILED' || e.exitCode !== 1) {
                throw e;
            }
            return false;
        }
    }
    async build(options) {
        const buildCommand = [
            'build',
            ...flatten(Object.entries(options.buildArgs || {}).map(([k, v]) => ['--build-arg', `${k}=${v}`])),
            '--tag', options.tag,
            ...options.target ? ['--target', options.target] : [],
            ...options.file ? ['--file', options.file] : [],
            '.',
        ];
        await this.execute(buildCommand, { cwd: options.directory });
    }
    /**
     * Get credentials from ECR and run docker login
     */
    async login(ecr) {
        const credentials = await docker_credentials_1.obtainEcrCredentials(ecr);
        // Use --password-stdin otherwise docker will complain. Loudly.
        await this.execute(['login',
            '--username', credentials.username,
            '--password-stdin',
            credentials.endpoint], {
            input: credentials.password,
            // Need to quiet otherwise Docker will complain
            // 'WARNING! Your password will be stored unencrypted'
            // doesn't really matter since it's a token.
            quiet: true,
        });
    }
    async tag(sourceTag, targetTag) {
        await this.execute(['tag', sourceTag, targetTag]);
    }
    async push(tag) {
        await this.execute(['push', tag]);
    }
    /**
     * If a CDK Docker Credentials file exists, creates a new Docker config directory.
     * Sets up `docker-credential-cdk-assets` to be the credential helper for each domain in the CDK config.
     * All future commands (e.g., `build`, `push`) will use this config.
     *
     * See https://docs.docker.com/engine/reference/commandline/login/#credential-helpers for more details on cred helpers.
     *
     * @returns true if CDK config was found and configured, false otherwise
     */
    configureCdkCredentials() {
        const config = docker_credentials_1.cdkCredentialsConfig();
        if (!config) {
            return false;
        }
        this.configDir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdkDockerConfig'));
        const domains = Object.keys(config.domainCredentials);
        const credHelpers = domains.reduce((map, domain) => {
            map[domain] = 'cdk-assets'; // Use docker-credential-cdk-assets for this domain
            return map;
        }, {});
        fs.writeFileSync(path.join(this.configDir, 'config.json'), JSON.stringify({ credHelpers }), { encoding: 'utf-8' });
        return true;
    }
    /**
     * Removes any configured Docker config directory.
     * All future commands (e.g., `build`, `push`) will use the default config.
     *
     * This is useful after calling `configureCdkCredentials` to reset to default credentials.
     */
    resetAuthPlugins() {
        this.configDir = undefined;
    }
    async execute(args, options = {}) {
        const configArgs = this.configDir ? ['--config', this.configDir] : [];
        try {
            await shell_1.shell(['docker', ...configArgs, ...args], { logger: this.logger, ...options });
        }
        catch (e) {
            if (e.code === 'ENOENT') {
                throw new Error('Unable to execute \'docker\' in order to build a container asset. Please install \'docker\' and try again.');
            }
            throw e;
        }
    }
}
exports.Docker = Docker;
function flatten(x) {
    return Array.prototype.concat([], ...x);
}
//# sourceMappingURL=data:application/json;base64,