"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHotswappableStateMachineChange = void 0;
const common_1 = require("./common");
async function isHotswappableStateMachineChange(logicalId, change, evaluateCfnTemplate) {
    var _a, _b;
    const stateMachineDefinitionChange = await isStateMachineDefinitionOnlyChange(change, evaluateCfnTemplate);
    if (stateMachineDefinitionChange === common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT ||
        stateMachineDefinitionChange === common_1.ChangeHotswapImpact.IRRELEVANT) {
        return stateMachineDefinitionChange;
    }
    const machineNameInCfnTemplate = (_b = (_a = change.newValue) === null || _a === void 0 ? void 0 : _a.Properties) === null || _b === void 0 ? void 0 : _b.StateMachineName;
    const machineName = await common_1.establishResourcePhysicalName(logicalId, machineNameInCfnTemplate, evaluateCfnTemplate);
    if (!machineName) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    return new StateMachineHotswapOperation({
        definition: stateMachineDefinitionChange,
        stateMachineName: machineName,
    });
}
exports.isHotswappableStateMachineChange = isHotswappableStateMachineChange;
async function isStateMachineDefinitionOnlyChange(change, evaluateCfnTemplate) {
    const newResourceType = change.newValue.Type;
    if (newResourceType !== 'AWS::StepFunctions::StateMachine') {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    const propertyUpdates = change.propertyUpdates;
    for (const updatedPropName in propertyUpdates) {
        // ensure that only changes to the definition string result in a hotswap
        if (updatedPropName !== 'DefinitionString') {
            return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
        }
    }
    return evaluateCfnTemplate.evaluateCfnExpression(propertyUpdates.DefinitionString.newValue);
}
class StateMachineHotswapOperation {
    constructor(stepFunctionResource) {
        this.stepFunctionResource = stepFunctionResource;
    }
    async apply(sdk) {
        // not passing the optional properties leaves them unchanged
        return sdk.stepFunctions().updateStateMachine({
            // even though the name of the property is stateMachineArn, passing the name of the state machine is allowed here
            stateMachineArn: this.stepFunctionResource.stateMachineName,
            definition: this.stepFunctionResource.definition,
        }).promise();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcGZ1bmN0aW9ucy1zdGF0ZS1tYWNoaW5lcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0ZXBmdW5jdGlvbnMtc3RhdGUtbWFjaGluZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EscUNBQWtKO0FBRzNJLEtBQUssVUFBVSxnQ0FBZ0MsQ0FDcEQsU0FBaUIsRUFBRSxNQUFtQyxFQUFFLG1CQUFtRDs7SUFFM0csTUFBTSw0QkFBNEIsR0FBRyxNQUFNLGtDQUFrQyxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNHLElBQUksNEJBQTRCLEtBQUssNEJBQW1CLENBQUMsd0JBQXdCO1FBQzdFLDRCQUE0QixLQUFLLDRCQUFtQixDQUFDLFVBQVUsRUFBRTtRQUNuRSxPQUFPLDRCQUE0QixDQUFDO0tBQ3JDO0lBRUQsTUFBTSx3QkFBd0IsZUFBRyxNQUFNLENBQUMsUUFBUSwwQ0FBRSxVQUFVLDBDQUFFLGdCQUFnQixDQUFDO0lBQy9FLE1BQU0sV0FBVyxHQUFHLE1BQU0sc0NBQTZCLENBQUMsU0FBUyxFQUFFLHdCQUF3QixFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDbEgsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNoQixPQUFPLDRCQUFtQixDQUFDLHdCQUF3QixDQUFDO0tBQ3JEO0lBRUQsT0FBTyxJQUFJLDRCQUE0QixDQUFDO1FBQ3RDLFVBQVUsRUFBRSw0QkFBNEI7UUFDeEMsZ0JBQWdCLEVBQUUsV0FBVztLQUM5QixDQUFDLENBQUM7QUFDTCxDQUFDO0FBbkJELDRFQW1CQztBQUVELEtBQUssVUFBVSxrQ0FBa0MsQ0FDL0MsTUFBbUMsRUFBRSxtQkFBbUQ7SUFFeEYsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDN0MsSUFBSSxlQUFlLEtBQUssa0NBQWtDLEVBQUU7UUFDMUQsT0FBTyw0QkFBbUIsQ0FBQyx3QkFBd0IsQ0FBQztLQUNyRDtJQUVELE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUM7SUFDL0MsS0FBSyxNQUFNLGVBQWUsSUFBSSxlQUFlLEVBQUU7UUFDN0Msd0VBQXdFO1FBQ3hFLElBQUksZUFBZSxLQUFLLGtCQUFrQixFQUFFO1lBQzFDLE9BQU8sNEJBQW1CLENBQUMsd0JBQXdCLENBQUM7U0FDckQ7S0FDRjtJQUVELE9BQU8sbUJBQW1CLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFPRCxNQUFNLDRCQUE0QjtJQUNoQyxZQUE2QixvQkFBMEM7UUFBMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtJQUN2RSxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFTO1FBQzFCLDREQUE0RDtRQUM1RCxPQUFPLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztZQUM1QyxpSEFBaUg7WUFDakgsZUFBZSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0I7WUFDM0QsVUFBVSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVO1NBQ2pELENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNmLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTREsgfSBmcm9tICcuLi9hd3MtYXV0aCc7XG5pbXBvcnQgeyBDaGFuZ2VIb3Rzd2FwSW1wYWN0LCBDaGFuZ2VIb3Rzd2FwUmVzdWx0LCBIb3Rzd2FwT3BlcmF0aW9uLCBIb3Rzd2FwcGFibGVDaGFuZ2VDYW5kaWRhdGUsIGVzdGFibGlzaFJlc291cmNlUGh5c2ljYWxOYW1lIH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHsgRXZhbHVhdGVDbG91ZEZvcm1hdGlvblRlbXBsYXRlIH0gZnJvbSAnLi9ldmFsdWF0ZS1jbG91ZGZvcm1hdGlvbi10ZW1wbGF0ZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpc0hvdHN3YXBwYWJsZVN0YXRlTWFjaGluZUNoYW5nZShcbiAgbG9naWNhbElkOiBzdHJpbmcsIGNoYW5nZTogSG90c3dhcHBhYmxlQ2hhbmdlQ2FuZGlkYXRlLCBldmFsdWF0ZUNmblRlbXBsYXRlOiBFdmFsdWF0ZUNsb3VkRm9ybWF0aW9uVGVtcGxhdGUsXG4pOiBQcm9taXNlPENoYW5nZUhvdHN3YXBSZXN1bHQ+IHtcbiAgY29uc3Qgc3RhdGVNYWNoaW5lRGVmaW5pdGlvbkNoYW5nZSA9IGF3YWl0IGlzU3RhdGVNYWNoaW5lRGVmaW5pdGlvbk9ubHlDaGFuZ2UoY2hhbmdlLCBldmFsdWF0ZUNmblRlbXBsYXRlKTtcbiAgaWYgKHN0YXRlTWFjaGluZURlZmluaXRpb25DaGFuZ2UgPT09IENoYW5nZUhvdHN3YXBJbXBhY3QuUkVRVUlSRVNfRlVMTF9ERVBMT1lNRU5UIHx8XG4gICAgICBzdGF0ZU1hY2hpbmVEZWZpbml0aW9uQ2hhbmdlID09PSBDaGFuZ2VIb3Rzd2FwSW1wYWN0LklSUkVMRVZBTlQpIHtcbiAgICByZXR1cm4gc3RhdGVNYWNoaW5lRGVmaW5pdGlvbkNoYW5nZTtcbiAgfVxuXG4gIGNvbnN0IG1hY2hpbmVOYW1lSW5DZm5UZW1wbGF0ZSA9IGNoYW5nZS5uZXdWYWx1ZT8uUHJvcGVydGllcz8uU3RhdGVNYWNoaW5lTmFtZTtcbiAgY29uc3QgbWFjaGluZU5hbWUgPSBhd2FpdCBlc3RhYmxpc2hSZXNvdXJjZVBoeXNpY2FsTmFtZShsb2dpY2FsSWQsIG1hY2hpbmVOYW1lSW5DZm5UZW1wbGF0ZSwgZXZhbHVhdGVDZm5UZW1wbGF0ZSk7XG4gIGlmICghbWFjaGluZU5hbWUpIHtcbiAgICByZXR1cm4gQ2hhbmdlSG90c3dhcEltcGFjdC5SRVFVSVJFU19GVUxMX0RFUExPWU1FTlQ7XG4gIH1cblxuICByZXR1cm4gbmV3IFN0YXRlTWFjaGluZUhvdHN3YXBPcGVyYXRpb24oe1xuICAgIGRlZmluaXRpb246IHN0YXRlTWFjaGluZURlZmluaXRpb25DaGFuZ2UsXG4gICAgc3RhdGVNYWNoaW5lTmFtZTogbWFjaGluZU5hbWUsXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBpc1N0YXRlTWFjaGluZURlZmluaXRpb25Pbmx5Q2hhbmdlKFxuICBjaGFuZ2U6IEhvdHN3YXBwYWJsZUNoYW5nZUNhbmRpZGF0ZSwgZXZhbHVhdGVDZm5UZW1wbGF0ZTogRXZhbHVhdGVDbG91ZEZvcm1hdGlvblRlbXBsYXRlLFxuKTogUHJvbWlzZTxzdHJpbmcgfCBDaGFuZ2VIb3Rzd2FwSW1wYWN0PiB7XG4gIGNvbnN0IG5ld1Jlc291cmNlVHlwZSA9IGNoYW5nZS5uZXdWYWx1ZS5UeXBlO1xuICBpZiAobmV3UmVzb3VyY2VUeXBlICE9PSAnQVdTOjpTdGVwRnVuY3Rpb25zOjpTdGF0ZU1hY2hpbmUnKSB7XG4gICAgcmV0dXJuIENoYW5nZUhvdHN3YXBJbXBhY3QuUkVRVUlSRVNfRlVMTF9ERVBMT1lNRU5UO1xuICB9XG5cbiAgY29uc3QgcHJvcGVydHlVcGRhdGVzID0gY2hhbmdlLnByb3BlcnR5VXBkYXRlcztcbiAgZm9yIChjb25zdCB1cGRhdGVkUHJvcE5hbWUgaW4gcHJvcGVydHlVcGRhdGVzKSB7XG4gICAgLy8gZW5zdXJlIHRoYXQgb25seSBjaGFuZ2VzIHRvIHRoZSBkZWZpbml0aW9uIHN0cmluZyByZXN1bHQgaW4gYSBob3Rzd2FwXG4gICAgaWYgKHVwZGF0ZWRQcm9wTmFtZSAhPT0gJ0RlZmluaXRpb25TdHJpbmcnKSB7XG4gICAgICByZXR1cm4gQ2hhbmdlSG90c3dhcEltcGFjdC5SRVFVSVJFU19GVUxMX0RFUExPWU1FTlQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2YWx1YXRlQ2ZuVGVtcGxhdGUuZXZhbHVhdGVDZm5FeHByZXNzaW9uKHByb3BlcnR5VXBkYXRlcy5EZWZpbml0aW9uU3RyaW5nLm5ld1ZhbHVlKTtcbn1cblxuaW50ZXJmYWNlIFN0YXRlTWFjaGluZVJlc291cmNlIHtcbiAgcmVhZG9ubHkgc3RhdGVNYWNoaW5lTmFtZTogc3RyaW5nO1xuICByZWFkb25seSBkZWZpbml0aW9uOiBzdHJpbmc7XG59XG5cbmNsYXNzIFN0YXRlTWFjaGluZUhvdHN3YXBPcGVyYXRpb24gaW1wbGVtZW50cyBIb3Rzd2FwT3BlcmF0aW9uIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdGVwRnVuY3Rpb25SZXNvdXJjZTogU3RhdGVNYWNoaW5lUmVzb3VyY2UpIHtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBhcHBseShzZGs6IElTREspOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIG5vdCBwYXNzaW5nIHRoZSBvcHRpb25hbCBwcm9wZXJ0aWVzIGxlYXZlcyB0aGVtIHVuY2hhbmdlZFxuICAgIHJldHVybiBzZGsuc3RlcEZ1bmN0aW9ucygpLnVwZGF0ZVN0YXRlTWFjaGluZSh7XG4gICAgICAvLyBldmVuIHRob3VnaCB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgaXMgc3RhdGVNYWNoaW5lQXJuLCBwYXNzaW5nIHRoZSBuYW1lIG9mIHRoZSBzdGF0ZSBtYWNoaW5lIGlzIGFsbG93ZWQgaGVyZVxuICAgICAgc3RhdGVNYWNoaW5lQXJuOiB0aGlzLnN0ZXBGdW5jdGlvblJlc291cmNlLnN0YXRlTWFjaGluZU5hbWUsXG4gICAgICBkZWZpbml0aW9uOiB0aGlzLnN0ZXBGdW5jdGlvblJlc291cmNlLmRlZmluaXRpb24sXG4gICAgfSkucHJvbWlzZSgpO1xuICB9XG59XG4iXX0=