"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerContextProvider = exports.provideContextValues = void 0;
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const cloudformation_deployments_1 = require("../api/cloudformation-deployments");
const logging_1 = require("../logging");
const settings_1 = require("../settings");
const ami_1 = require("./ami");
const availability_zones_1 = require("./availability-zones");
const endpoint_service_availability_zones_1 = require("./endpoint-service-availability-zones");
const hosted_zones_1 = require("./hosted-zones");
const keys_1 = require("./keys");
const load_balancers_1 = require("./load-balancers");
const security_groups_1 = require("./security-groups");
const ssm_parameters_1 = require("./ssm-parameters");
const vpcs_1 = require("./vpcs");
/**
 * Iterate over the list of missing context values and invoke the appropriate providers from the map to retrieve them
 */
async function provideContextValues(missingValues, context, sdk) {
    for (const missingContext of missingValues) {
        const key = missingContext.key;
        const constructor = availableContextProviders[missingContext.provider];
        if (!constructor) {
            // eslint-disable-next-line max-len
            throw new Error(`Unrecognized context provider name: ${missingContext.provider}. You might need to update the toolkit to match the version of the construct library.`);
        }
        const provider = new constructor(sdk);
        let value;
        try {
            const environment = cxapi.EnvironmentUtils.make(missingContext.props.account, missingContext.props.region);
            const resolvedEnvironment = await sdk.resolveEnvironment(environment);
            const arns = await cloudformation_deployments_1.replaceEnvPlaceholders({
                lookupRoleArn: missingContext.props.lookupRoleArn,
            }, resolvedEnvironment, sdk);
            value = await provider.getValue({ ...missingContext.props, lookupRoleArn: arns.lookupRoleArn });
        }
        catch (e) {
            // Set a specially formatted provider value which will be interpreted
            // as a lookup failure in the toolkit.
            value = { [cxapi.PROVIDER_ERROR_KEY]: e.message, [settings_1.TRANSIENT_CONTEXT_KEY]: true };
        }
        context.set(key, value);
        logging_1.debug(`Setting "${key}" context to ${JSON.stringify(value)}`);
    }
}
exports.provideContextValues = provideContextValues;
/**
 * Register a context provider
 *
 * (Only available for testing right now).
 */
function registerContextProvider(name, provider) {
    availableContextProviders[name] = provider;
}
exports.registerContextProvider = registerContextProvider;
const availableContextProviders = {
    [cxschema.ContextProvider.AVAILABILITY_ZONE_PROVIDER]: availability_zones_1.AZContextProviderPlugin,
    [cxschema.ContextProvider.SSM_PARAMETER_PROVIDER]: ssm_parameters_1.SSMContextProviderPlugin,
    [cxschema.ContextProvider.HOSTED_ZONE_PROVIDER]: hosted_zones_1.HostedZoneContextProviderPlugin,
    [cxschema.ContextProvider.VPC_PROVIDER]: vpcs_1.VpcNetworkContextProviderPlugin,
    [cxschema.ContextProvider.AMI_PROVIDER]: ami_1.AmiContextProviderPlugin,
    [cxschema.ContextProvider.ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER]: endpoint_service_availability_zones_1.EndpointServiceAZContextProviderPlugin,
    [cxschema.ContextProvider.SECURITY_GROUP_PROVIDER]: security_groups_1.SecurityGroupContextProviderPlugin,
    [cxschema.ContextProvider.LOAD_BALANCER_PROVIDER]: load_balancers_1.LoadBalancerContextProviderPlugin,
    [cxschema.ContextProvider.LOAD_BALANCER_LISTENER_PROVIDER]: load_balancers_1.LoadBalancerListenerContextProviderPlugin,
    [cxschema.ContextProvider.KEY_PROVIDER]: keys_1.KeyContextProviderPlugin,
};
//# sourceMappingURL=data:application/json;base64,